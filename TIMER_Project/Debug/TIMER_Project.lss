
TIMER_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  000046b6  0000474a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080018c  0080018c  00004876  2**0
                  ALLOC
  3 .stab         00003c9c  00000000  00000000  00004878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015f1  00000000  00000000  00008514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_1>
       8:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_2>
       c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__vector_10>
      2c:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 22 	call	0x44ec	; 0x44ec <main>
      8a:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 23 	jmp	0x4644	; 0x4644 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 23 	jmp	0x4644	; 0x4644 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 23 	jmp	0x467c	; 0x467c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 46 23 	jmp	0x468c	; 0x468c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2e 23 	jmp	0x465c	; 0x465c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 32 23 	jmp	0x4664	; 0x4664 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2a 23 	jmp	0x4654	; 0x4654 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 46 23 	jmp	0x468c	; 0x468c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_TIMER0_void_Init>:

static u32 NumberOfOverflows=0;
static u32  NumberOfRemainingTicks=0;
static void(*Arr_Call_Back[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)//set timer mood,set OC0 pin mood
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	 TCCR0_REG|=TIMER0_OC0_MODE;
    #else
        #error ("wrong insert node")
    #endif
#elif  (TIMER0_MODE==TIMER0_PHASECORRECT_MODE)
	SET_BIT(TCCR0_REG,WGM00_BIT);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24
	//step2 choose OC0 mpde
      #if(TIMER0_OC0_MODE==TIMER0_PWM_NON_INVERTED||TIMER0_OC0_MODE== TIMER0_PWM_INVERTED)
	 //step1 apply mask
	  TCCR0_REG&= TIMER0_OC0_MASK;
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7c       	andi	r24, 0xCF	; 207
     e5e:	8c 93       	st	X, r24
	 //insert value
	   TCCR0_REG|=TIMER0_OC0_MODE;
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24


#else
#error();
#endif
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <M_TIMER0_void_start>:
void M_TIMER0_void_start(void)//set clock prescaler
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER>=TIMER0_PRESCALER_NO_CLK&&TIMER0_PRESCALER<=TIMER0_PRESCALER_EXTCLK_RAIS_EDGE)
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 7f       	andi	r24, 0xF8	; 248
     e88:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_PRESCALER;
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	85 60       	ori	r24, 0x05	; 5
     e96:	8c 93       	st	X, r24
#else
#error("invalid prescaler")
#endif
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)// NO CLOCK
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
     ea6:	a3 e5       	ldi	r26, 0x53	; 83
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e3 e5       	ldi	r30, 0x53	; 83
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)//time in milli seconds;
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	a5 97       	sbiw	r28, 0x25	; 37
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	6d 8f       	std	Y+29, r22	; 0x1d
     ed0:	7e 8f       	std	Y+30, r23	; 0x1e
     ed2:	8f 8f       	std	Y+31, r24	; 0x1f
     ed4:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
     ed6:	ce 01       	movw	r24, r28
     ed8:	09 96       	adiw	r24, 0x09	; 9
     eda:	9a a3       	std	Y+34, r25	; 0x22
     edc:	89 a3       	std	Y+33, r24	; 0x21
     ede:	e8 e6       	ldi	r30, 0x68	; 104
     ee0:	f1 e0       	ldi	r31, 0x01	; 1
     ee2:	fc a3       	std	Y+36, r31	; 0x24
     ee4:	eb a3       	std	Y+35, r30	; 0x23
     ee6:	f4 e1       	ldi	r31, 0x14	; 20
     ee8:	fd a3       	std	Y+37, r31	; 0x25
     eea:	eb a1       	ldd	r30, Y+35	; 0x23
     eec:	fc a1       	ldd	r31, Y+36	; 0x24
     eee:	00 80       	ld	r0, Z
     ef0:	8b a1       	ldd	r24, Y+35	; 0x23
     ef2:	9c a1       	ldd	r25, Y+36	; 0x24
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	9c a3       	std	Y+36, r25	; 0x24
     ef8:	8b a3       	std	Y+35, r24	; 0x23
     efa:	e9 a1       	ldd	r30, Y+33	; 0x21
     efc:	fa a1       	ldd	r31, Y+34	; 0x22
     efe:	00 82       	st	Z, r0
     f00:	89 a1       	ldd	r24, Y+33	; 0x21
     f02:	9a a1       	ldd	r25, Y+34	; 0x22
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	9a a3       	std	Y+34, r25	; 0x22
     f08:	89 a3       	std	Y+33, r24	; 0x21
     f0a:	9d a1       	ldd	r25, Y+37	; 0x25
     f0c:	91 50       	subi	r25, 0x01	; 1
     f0e:	9d a3       	std	Y+37, r25	; 0x25
     f10:	ed a1       	ldd	r30, Y+37	; 0x25
     f12:	ee 23       	and	r30, r30
     f14:	51 f7       	brne	.-44     	; 0xeea <M_TIMER0_void_setTime+0x30>
	f32 Locticktime=(f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/FCPU;
     f16:	89 8d       	ldd	r24, Y+25	; 0x19
     f18:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f1a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     f1c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8d 83       	std	Y+5, r24	; 0x05
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	af 83       	std	Y+7, r26	; 0x07
     f44:	b8 87       	std	Y+8, r27	; 0x08
	u32  NoOfDesiredTicks=(copy_u32timeMS*1000)/Locticktime;
     f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f48:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f4a:	af 8d       	ldd	r26, Y+31	; 0x1f
     f4c:	b8 a1       	ldd	r27, Y+32	; 0x20
     f4e:	28 ee       	ldi	r18, 0xE8	; 232
     f50:	33 e0       	ldi	r19, 0x03	; 3
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 93 22 	call	0x4526	; 0x4526 <__mulsi3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	2d 81       	ldd	r18, Y+5	; 0x05
     f74:	3e 81       	ldd	r19, Y+6	; 0x06
     f76:	4f 81       	ldd	r20, Y+7	; 0x07
     f78:	58 85       	ldd	r21, Y+8	; 0x08
     f7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	bc 01       	movw	r22, r24
     f84:	cd 01       	movw	r24, r26
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	ab 83       	std	Y+3, r26	; 0x03
     f94:	bc 83       	std	Y+4, r27	; 0x04
		NumberOfOverflows++;
	}
#elif  (TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
     f96:	a5 96       	adiw	r28, 0x25	; 37
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u32 copy_u8IntID)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	28 97       	sbiw	r28, 0x08	; 8
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	69 83       	std	Y+1, r22	; 0x01
     fbe:	7a 83       	std	Y+2, r23	; 0x02
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	9c 83       	std	Y+4, r25	; 0x04
	switch(copy_u8IntID)
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	ab 81       	ldd	r26, Y+3	; 0x03
     fca:	bc 81       	ldd	r27, Y+4	; 0x04
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	af 83       	std	Y+7, r26	; 0x07
     fd2:	b8 87       	std	Y+8, r27	; 0x08
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	af 81       	ldd	r26, Y+7	; 0x07
     fda:	b8 85       	ldd	r27, Y+8	; 0x08
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	a1 05       	cpc	r26, r1
     fe0:	b1 05       	cpc	r27, r1
     fe2:	51 f0       	breq	.+20     	; 0xff8 <M_TIMER0_void_EnableInt+0x50>
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	af 81       	ldd	r26, Y+7	; 0x07
     fea:	b8 85       	ldd	r27, Y+8	; 0x08
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	a1 05       	cpc	r26, r1
     ff2:	b1 05       	cpc	r27, r1
     ff4:	49 f0       	breq	.+18     	; 0x1008 <M_TIMER0_void_EnableInt+0x60>
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <M_TIMER0_void_EnableInt+0x6e>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
     ff8:	a9 e5       	ldi	r26, 0x59	; 89
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e9 e5       	ldi	r30, 0x59	; 89
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	8c 93       	st	X, r24
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <M_TIMER0_void_EnableInt+0x6e>
		break;
	case TIMER0_COMP_INT_ID:
	SET_BIT(TIMSK_REG,OCIE0_BIT);
    1008:	a9 e5       	ldi	r26, 0x59	; 89
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e9 e5       	ldi	r30, 0x59	; 89
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	8c 93       	st	X, r24
			break;
	}
	//METHOD 2
	if(copy_u8IntID >= TIMER0_OVF_INT_ID && copy_u8IntID <= TIMER0_COMP_INT_ID )
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	ab 81       	ldd	r26, Y+3	; 0x03
    101c:	bc 81       	ldd	r27, Y+4	; 0x04
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	91 05       	cpc	r25, r1
    1022:	a1 05       	cpc	r26, r1
    1024:	b1 05       	cpc	r27, r1
    1026:	90 f4       	brcc	.+36     	; 0x104c <M_TIMER0_void_EnableInt+0xa4>
		{
			SET_BIT(TIMSK_REG,copy_u8IntID);
    1028:	a9 e5       	ldi	r26, 0x59	; 89
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e9 e5       	ldi	r30, 0x59	; 89
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	29 81       	ldd	r18, Y+1	; 0x01
    1036:	3a 81       	ldd	r19, Y+2	; 0x02
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <M_TIMER0_void_EnableInt+0x9c>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <M_TIMER0_void_EnableInt+0x98>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
		}

}
    104c:	28 96       	adiw	r28, 0x08	; 8
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u32 copy_u8IntID)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <M_TIMER0_void_DisableInt+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <M_TIMER0_void_DisableInt+0x8>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	69 83       	std	Y+1, r22	; 0x01
    106c:	7a 83       	std	Y+2, r23	; 0x02
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	9c 83       	std	Y+4, r25	; 0x04
		CLR_BIT(TIMSK_REG;OCIE0_BIT)
				break;
		}*/
	//METHOD 2

	CLR_BIT(TIMSK_REG,copy_u8IntID);
    1072:	a9 e5       	ldi	r26, 0x59	; 89
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e9 e5       	ldi	r30, 0x59	; 89
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	29 81       	ldd	r18, Y+1	; 0x01
    1080:	3a 81       	ldd	r19, Y+2	; 0x02
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <M_TIMER0_void_DisableInt+0x30>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <M_TIMER0_void_DisableInt+0x2c>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
  }
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void(*ptrfn)(void),u8 copy_u8IntID)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <M_TIMER0_void_setCallBack+0x6>
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <M_TIMER0_void_setCallBack+0x8>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9a 83       	std	Y+2, r25	; 0x02
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3d 83       	std	Y+5, r19	; 0x05
    10c2:	2c 83       	std	Y+4, r18	; 0x04
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <M_TIMER0_void_setCallBack+0x32>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	21 30       	cpi	r18, 0x01	; 1
    10d2:	31 05       	cpc	r19, r1
    10d4:	41 f0       	breq	.+16     	; 0x10e6 <M_TIMER0_void_setCallBack+0x40>
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_Call_Back[0]=ptrfn;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	90 93 95 01 	sts	0x0195, r25
    10e0:	80 93 94 01 	sts	0x0194, r24
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_COMP_INT_ID:
		Arr_Call_Back[1]=ptrfn;
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	90 93 97 01 	sts	0x0197, r25
    10ee:	80 93 96 01 	sts	0x0196, r24
		break;
	}
	//method 2
	Arr_Call_Back[copy_u8IntID]=ptrfn;
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	fc 01       	movw	r30, r24
    10fe:	ec 56       	subi	r30, 0x6C	; 108
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	80 83       	st	Z, r24
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG=255-(((copy_u8Duty*256)/100)-1);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <M_TIMER0_void_setPhasecorrectPWM>:
void M_TIMER0_void_setPhasecorrectPWM(u8 copy_u8Duty)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	0f 92       	push	r0
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE ==TIMER0_PHASECORRECT_MODE)
     #if(TIMER0_OC0_MODE ==TIMER0_PWM_NON_INVERTED)
	 OCR0_REG=((copy_u8Duty*255)/100);
    113a:	ec e5       	ldi	r30, 0x5C	; 92
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	48 2f       	mov	r20, r24
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	ca 01       	movw	r24, r20
    1146:	9c 01       	movw	r18, r24
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	c9 01       	movw	r24, r18
    114e:	96 95       	lsr	r25
    1150:	98 2f       	mov	r25, r24
    1152:	88 27       	eor	r24, r24
    1154:	97 95       	ror	r25
    1156:	87 95       	ror	r24
    1158:	82 1b       	sub	r24, r18
    115a:	93 0b       	sbc	r25, r19
    115c:	84 0f       	add	r24, r20
    115e:	95 1f       	adc	r25, r21
    1160:	24 e6       	ldi	r18, 0x64	; 100
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	b9 01       	movw	r22, r18
    1166:	0e 94 be 22 	call	0x457c	; 0x457c <__divmodhi4>
    116a:	cb 01       	movw	r24, r22
    116c:	80 83       	st	Z, r24
	 OCR0_REG=(255-(copy_u8Duty*255)/100);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_Overflow_Count=0;
		Loc_Overflow_Count++;
    11a0:	80 91 98 01 	lds	r24, 0x0198
    11a4:	90 91 99 01 	lds	r25, 0x0199
    11a8:	a0 91 9a 01 	lds	r26, 0x019A
    11ac:	b0 91 9b 01 	lds	r27, 0x019B
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	a1 1d       	adc	r26, r1
    11b4:	b1 1d       	adc	r27, r1
    11b6:	80 93 98 01 	sts	0x0198, r24
    11ba:	90 93 99 01 	sts	0x0199, r25
    11be:	a0 93 9a 01 	sts	0x019A, r26
    11c2:	b0 93 9b 01 	sts	0x019B, r27
		if(Loc_Overflow_Count==NumberOfOverflows)
    11c6:	20 91 98 01 	lds	r18, 0x0198
    11ca:	30 91 99 01 	lds	r19, 0x0199
    11ce:	40 91 9a 01 	lds	r20, 0x019A
    11d2:	50 91 9b 01 	lds	r21, 0x019B
    11d6:	80 91 8c 01 	lds	r24, 0x018C
    11da:	90 91 8d 01 	lds	r25, 0x018D
    11de:	a0 91 8e 01 	lds	r26, 0x018E
    11e2:	b0 91 8f 01 	lds	r27, 0x018F
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	4a 07       	cpc	r20, r26
    11ec:	5b 07       	cpc	r21, r27
    11ee:	f9 f4       	brne	.+62     	; 0x122e <__vector_11+0xb8>
		{
			TCNT0_REG=256-NumberOfRemainingTicks;
    11f0:	e2 e5       	ldi	r30, 0x52	; 82
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 91 90 01 	lds	r24, 0x0190
    11f8:	90 91 91 01 	lds	r25, 0x0191
    11fc:	a0 91 92 01 	lds	r26, 0x0192
    1200:	b0 91 93 01 	lds	r27, 0x0193
    1204:	81 95       	neg	r24
    1206:	80 83       	st	Z, r24
			Loc_Overflow_Count=0;
    1208:	10 92 98 01 	sts	0x0198, r1
    120c:	10 92 99 01 	sts	0x0199, r1
    1210:	10 92 9a 01 	sts	0x019A, r1
    1214:	10 92 9b 01 	sts	0x019B, r1
	       if(Arr_Call_Back[TIMER0_OVF_INT_ID]!=NULL)
    1218:	80 91 94 01 	lds	r24, 0x0194
    121c:	90 91 95 01 	lds	r25, 0x0195
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	29 f0       	breq	.+10     	; 0x122e <__vector_11+0xb8>
	         {
	            	Arr_Call_Back[TIMER0_OVF_INT_ID]();
    1224:	e0 91 94 01 	lds	r30, 0x0194
    1228:	f0 91 95 01 	lds	r31, 0x0195
    122c:	09 95       	icall
	         }
	}
}
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	bf 91       	pop	r27
    1238:	af 91       	pop	r26
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	7f 91       	pop	r23
    1240:	6f 91       	pop	r22
    1242:	5f 91       	pop	r21
    1244:	4f 91       	pop	r20
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1254:	1f 92       	push	r1
    1256:	0f 92       	push	r0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	0f 92       	push	r0
    125c:	11 24       	eor	r1, r1
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62

	if(Arr_Call_Back[TIMER0_COMP_INT_ID]!=NULL)
    127e:	80 91 96 01 	lds	r24, 0x0196
    1282:	90 91 97 01 	lds	r25, 0x0197
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	29 f0       	breq	.+10     	; 0x1294 <__vector_10+0x40>
	{
		Arr_Call_Back[TIMER0_COMP_INT_ID]();
    128a:	e0 91 96 01 	lds	r30, 0x0196
    128e:	f0 91 97 01 	lds	r31, 0x0197
    1292:	09 95       	icall
	}

}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
    12c2:	af e5       	ldi	r26, 0x5F	; 95
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e5       	ldi	r30, 0x5F	; 95
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 68       	ori	r24, 0x80	; 128
    12ce:	8c 93       	st	X, r24
asm("SEI");
    12d0:	78 94       	sei

}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
    12e0:	f8 94       	cli
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <M_EXTI_void_Enable+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <M_EXTI_void_Enable+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	3c 83       	std	Y+4, r19	; 0x04
    1300:	2b 83       	std	Y+3, r18	; 0x03
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	86 30       	cpi	r24, 0x06	; 6
    1308:	91 05       	cpc	r25, r1
    130a:	59 f0       	breq	.+22     	; 0x1322 <M_EXTI_void_Enable+0x3a>
    130c:	2b 81       	ldd	r18, Y+3	; 0x03
    130e:	3c 81       	ldd	r19, Y+4	; 0x04
    1310:	27 30       	cpi	r18, 0x07	; 7
    1312:	31 05       	cpc	r19, r1
    1314:	b1 f0       	breq	.+44     	; 0x1342 <M_EXTI_void_Enable+0x5a>
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	85 30       	cpi	r24, 0x05	; 5
    131c:	91 05       	cpc	r25, r1
    131e:	41 f1       	breq	.+80     	; 0x1370 <M_EXTI_void_Enable+0x88>
    1320:	38 c0       	rjmp	.+112    	; 0x1392 <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
    1322:	a5 e5       	ldi	r26, 0x55	; 85
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e5       	ldi	r30, 0x55	; 85
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8c 7f       	andi	r24, 0xFC	; 252
    132e:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
    1330:	a5 e5       	ldi	r26, 0x55	; 85
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e5       	ldi	r30, 0x55	; 85
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	90 81       	ld	r25, Z
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	89 2b       	or	r24, r25
    133e:	8c 93       	st	X, r24
    1340:	28 c0       	rjmp	.+80     	; 0x1392 <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
    1342:	a5 e5       	ldi	r26, 0x55	; 85
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e5       	ldi	r30, 0x55	; 85
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	83 7f       	andi	r24, 0xF3	; 243
    134e:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    1350:	a5 e5       	ldi	r26, 0x55	; 85
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e5       	ldi	r30, 0x55	; 85
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	82 2b       	or	r24, r18
    136c:	8c 93       	st	X, r24
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
    1370:	a4 e5       	ldi	r26, 0x54	; 84
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e4 e5       	ldi	r30, 0x54	; 84
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8f 7b       	andi	r24, 0xBF	; 191
    137c:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
    137e:	a5 e5       	ldi	r26, 0x55	; 85
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e5       	ldi	r30, 0x55	; 85
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	98 2f       	mov	r25, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 74       	andi	r24, 0x40	; 64
    138e:	89 2b       	or	r24, r25
    1390:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	85 30       	cpi	r24, 0x05	; 5
    1396:	b0 f0       	brcs	.+44     	; 0x13c4 <M_EXTI_void_Enable+0xdc>
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	88 30       	cpi	r24, 0x08	; 8
    139c:	98 f4       	brcc	.+38     	; 0x13c4 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
    139e:	ab e5       	ldi	r26, 0x5B	; 91
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e5       	ldi	r30, 0x5B	; 91
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <M_EXTI_void_Enable+0xd4>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <M_EXTI_void_Enable+0xd0>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24

}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <M_EXTI_void_Disble+0x6>
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	3b 83       	std	Y+3, r19	; 0x03
    13e8:	2a 83       	std	Y+2, r18	; 0x02
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	86 30       	cpi	r24, 0x06	; 6
    13f0:	91 05       	cpc	r25, r1
    13f2:	59 f0       	breq	.+22     	; 0x140a <M_EXTI_void_Disble+0x38>
    13f4:	2a 81       	ldd	r18, Y+2	; 0x02
    13f6:	3b 81       	ldd	r19, Y+3	; 0x03
    13f8:	27 30       	cpi	r18, 0x07	; 7
    13fa:	31 05       	cpc	r19, r1
    13fc:	71 f0       	breq	.+28     	; 0x141a <M_EXTI_void_Disble+0x48>
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	91 05       	cpc	r25, r1
    1406:	89 f0       	breq	.+34     	; 0x142a <M_EXTI_void_Disble+0x58>
    1408:	17 c0       	rjmp	.+46     	; 0x1438 <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
    140a:	ab e5       	ldi	r26, 0x5B	; 91
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e5       	ldi	r30, 0x5B	; 91
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8f 7b       	andi	r24, 0xBF	; 191
    1416:	8c 93       	st	X, r24
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
    141a:	ab e5       	ldi	r26, 0x5B	; 91
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e5       	ldi	r30, 0x5B	; 91
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 77       	andi	r24, 0x7F	; 127
    1426:	8c 93       	st	X, r24
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
    142a:	ab e5       	ldi	r26, 0x5B	; 91
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e5       	ldi	r30, 0x5B	; 91
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 7d       	andi	r24, 0xDF	; 223
    1436:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	b8 f0       	brcs	.+46     	; 0x146c <M_EXTI_void_Disble+0x9a>
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	a0 f4       	brcc	.+40     	; 0x146c <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
    1444:	ab e5       	ldi	r26, 0x5B	; 91
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	eb e5       	ldi	r30, 0x5B	; 91
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <M_EXTI_void_Disble+0x90>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <M_EXTI_void_Disble+0x8c>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <M_EXTI_void_setCallback+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <M_EXTI_void_setCallback+0x8>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3d 83       	std	Y+5, r19	; 0x05
    1494:	2c 83       	std	Y+4, r18	; 0x04
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	86 30       	cpi	r24, 0x06	; 6
    149c:	91 05       	cpc	r25, r1
    149e:	59 f0       	breq	.+22     	; 0x14b6 <M_EXTI_void_setCallback+0x3e>
    14a0:	2c 81       	ldd	r18, Y+4	; 0x04
    14a2:	3d 81       	ldd	r19, Y+5	; 0x05
    14a4:	27 30       	cpi	r18, 0x07	; 7
    14a6:	31 05       	cpc	r19, r1
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <M_EXTI_void_setCallback+0x4c>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	85 30       	cpi	r24, 0x05	; 5
    14b0:	91 05       	cpc	r25, r1
    14b2:	79 f0       	breq	.+30     	; 0x14d2 <M_EXTI_void_setCallback+0x5a>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	90 93 9d 01 	sts	0x019D, r25
    14be:	80 93 9c 01 	sts	0x019C, r24
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	90 93 9f 01 	sts	0x019F, r25
    14cc:	80 93 9e 01 	sts	0x019E, r24
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	90 93 a1 01 	sts	0x01A1, r25
    14da:	80 93 a0 01 	sts	0x01A0, r24
			   break;
		}
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <__vector_1>:

ISR(INT0_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
    1518:	80 91 9c 01 	lds	r24, 0x019C
    151c:	90 91 9d 01 	lds	r25, 0x019D
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	29 f0       	breq	.+10     	; 0x152e <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1524:	e0 91 9c 01 	lds	r30, 0x019C
    1528:	f0 91 9d 01 	lds	r31, 0x019D
    152c:	09 95       	icall
	}
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_2>:
ISR(INT1_vect)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
    157e:	80 91 9e 01 	lds	r24, 0x019E
    1582:	90 91 9f 01 	lds	r25, 0x019F
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	29 f0       	breq	.+10     	; 0x1594 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    158a:	e0 91 9e 01 	lds	r30, 0x019E
    158e:	f0 91 9f 01 	lds	r31, 0x019F
    1592:	09 95       	icall
		}
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_3>:
ISR(INT2_vect)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
    15e4:	80 91 a0 01 	lds	r24, 0x01A0
    15e8:	90 91 a1 01 	lds	r25, 0x01A1
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	29 f0       	breq	.+10     	; 0x15fa <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    15f0:	e0 91 a0 01 	lds	r30, 0x01A0
    15f4:	f0 91 a1 01 	lds	r31, 0x01A1
    15f8:	09 95       	icall
		}
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	2d 97       	sbiw	r28, 0x0d	; 13
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
    1638:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3d 87       	std	Y+13, r19	; 0x0d
    1642:	2c 87       	std	Y+12, r18	; 0x0c
    1644:	8c 85       	ldd	r24, Y+12	; 0x0c
    1646:	9d 85       	ldd	r25, Y+13	; 0x0d
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <M_DIO_void_setPinDir+0x30>
    164e:	4f c0       	rjmp	.+158    	; 0x16ee <M_DIO_void_setPinDir+0xce>
    1650:	2c 85       	ldd	r18, Y+12	; 0x0c
    1652:	3d 85       	ldd	r19, Y+13	; 0x0d
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <M_DIO_void_setPinDir+0x44>
    165a:	8c 85       	ldd	r24, Y+12	; 0x0c
    165c:	9d 85       	ldd	r25, Y+13	; 0x0d
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	71 f0       	breq	.+28     	; 0x167e <M_DIO_void_setPinDir+0x5e>
    1662:	ec c0       	rjmp	.+472    	; 0x183c <M_DIO_void_setPinDir+0x21c>
    1664:	2c 85       	ldd	r18, Y+12	; 0x0c
    1666:	3d 85       	ldd	r19, Y+13	; 0x0d
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <M_DIO_void_setPinDir+0x50>
    166e:	77 c0       	rjmp	.+238    	; 0x175e <M_DIO_void_setPinDir+0x13e>
    1670:	8c 85       	ldd	r24, Y+12	; 0x0c
    1672:	9d 85       	ldd	r25, Y+13	; 0x0d
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <M_DIO_void_setPinDir+0x5c>
    167a:	a9 c0       	rjmp	.+338    	; 0x17ce <M_DIO_void_setPinDir+0x1ae>
    167c:	df c0       	rjmp	.+446    	; 0x183c <M_DIO_void_setPinDir+0x21c>
	{
	case PORTA_ID :
		switch (DIRECTION)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3b 87       	std	Y+11, r19	; 0x0b
    1686:	2a 87       	std	Y+10, r18	; 0x0a
    1688:	8a 85       	ldd	r24, Y+10	; 0x0a
    168a:	9b 85       	ldd	r25, Y+11	; 0x0b
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <M_DIO_void_setPinDir+0x7c>
    1690:	2a 85       	ldd	r18, Y+10	; 0x0a
    1692:	3b 85       	ldd	r19, Y+11	; 0x0b
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 05       	cpc	r19, r1
    1698:	b1 f0       	breq	.+44     	; 0x16c6 <M_DIO_void_setPinDir+0xa6>
    169a:	d0 c0       	rjmp	.+416    	; 0x183c <M_DIO_void_setPinDir+0x21c>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    169c:	aa e3       	ldi	r26, 0x3A	; 58
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ea e3       	ldi	r30, 0x3A	; 58
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <M_DIO_void_setPinDir+0x9a>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <M_DIO_void_setPinDir+0x96>
    16be:	80 95       	com	r24
    16c0:	84 23       	and	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	bb c0       	rjmp	.+374    	; 0x183c <M_DIO_void_setPinDir+0x21c>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    16c6:	aa e3       	ldi	r26, 0x3A	; 58
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	ea e3       	ldi	r30, 0x3A	; 58
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <M_DIO_void_setPinDir+0xc4>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <M_DIO_void_setPinDir+0xc0>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	a7 c0       	rjmp	.+334    	; 0x183c <M_DIO_void_setPinDir+0x21c>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	39 87       	std	Y+9, r19	; 0x09
    16f6:	28 87       	std	Y+8, r18	; 0x08
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	99 85       	ldd	r25, Y+9	; 0x09
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	31 f0       	breq	.+12     	; 0x170c <M_DIO_void_setPinDir+0xec>
    1700:	28 85       	ldd	r18, Y+8	; 0x08
    1702:	39 85       	ldd	r19, Y+9	; 0x09
    1704:	21 30       	cpi	r18, 0x01	; 1
    1706:	31 05       	cpc	r19, r1
    1708:	b1 f0       	breq	.+44     	; 0x1736 <M_DIO_void_setPinDir+0x116>
    170a:	98 c0       	rjmp	.+304    	; 0x183c <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    170c:	a7 e3       	ldi	r26, 0x37	; 55
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e7 e3       	ldi	r30, 0x37	; 55
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <M_DIO_void_setPinDir+0x10a>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <M_DIO_void_setPinDir+0x106>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	83 c0       	rjmp	.+262    	; 0x183c <M_DIO_void_setPinDir+0x21c>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    1736:	a7 e3       	ldi	r26, 0x37	; 55
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e7 e3       	ldi	r30, 0x37	; 55
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <M_DIO_void_setPinDir+0x134>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <M_DIO_void_setPinDir+0x130>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	6f c0       	rjmp	.+222    	; 0x183c <M_DIO_void_setPinDir+0x21c>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3f 83       	std	Y+7, r19	; 0x07
    1766:	2e 83       	std	Y+6, r18	; 0x06
    1768:	8e 81       	ldd	r24, Y+6	; 0x06
    176a:	9f 81       	ldd	r25, Y+7	; 0x07
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	31 f0       	breq	.+12     	; 0x177c <M_DIO_void_setPinDir+0x15c>
    1770:	2e 81       	ldd	r18, Y+6	; 0x06
    1772:	3f 81       	ldd	r19, Y+7	; 0x07
    1774:	21 30       	cpi	r18, 0x01	; 1
    1776:	31 05       	cpc	r19, r1
    1778:	b1 f0       	breq	.+44     	; 0x17a6 <M_DIO_void_setPinDir+0x186>
    177a:	60 c0       	rjmp	.+192    	; 0x183c <M_DIO_void_setPinDir+0x21c>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    177c:	a4 e3       	ldi	r26, 0x34	; 52
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 e3       	ldi	r30, 0x34	; 52
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <M_DIO_void_setPinDir+0x17a>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <M_DIO_void_setPinDir+0x176>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	4b c0       	rjmp	.+150    	; 0x183c <M_DIO_void_setPinDir+0x21c>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    17a6:	a4 e3       	ldi	r26, 0x34	; 52
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e4 e3       	ldi	r30, 0x34	; 52
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <M_DIO_void_setPinDir+0x1a4>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <M_DIO_void_setPinDir+0x1a0>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <M_DIO_void_setPinDir+0x21c>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3d 83       	std	Y+5, r19	; 0x05
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	31 f0       	breq	.+12     	; 0x17ec <M_DIO_void_setPinDir+0x1cc>
    17e0:	2c 81       	ldd	r18, Y+4	; 0x04
    17e2:	3d 81       	ldd	r19, Y+5	; 0x05
    17e4:	21 30       	cpi	r18, 0x01	; 1
    17e6:	31 05       	cpc	r19, r1
    17e8:	b1 f0       	breq	.+44     	; 0x1816 <M_DIO_void_setPinDir+0x1f6>
    17ea:	28 c0       	rjmp	.+80     	; 0x183c <M_DIO_void_setPinDir+0x21c>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    17ec:	a1 e3       	ldi	r26, 0x31	; 49
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e1 e3       	ldi	r30, 0x31	; 49
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <M_DIO_void_setPinDir+0x1ea>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <M_DIO_void_setPinDir+0x1e6>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	13 c0       	rjmp	.+38     	; 0x183c <M_DIO_void_setPinDir+0x21c>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    1816:	a1 e3       	ldi	r26, 0x31	; 49
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e1 e3       	ldi	r30, 0x31	; 49
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <M_DIO_void_setPinDir+0x214>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <M_DIO_void_setPinDir+0x210>
    1838:	84 2b       	or	r24, r20
    183a:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    183c:	2d 96       	adiw	r28, 0x0d	; 13
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2d 97       	sbiw	r28, 0x0d	; 13
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
    1866:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3d 87       	std	Y+13, r19	; 0x0d
    1870:	2c 87       	std	Y+12, r18	; 0x0c
    1872:	8c 85       	ldd	r24, Y+12	; 0x0c
    1874:	9d 85       	ldd	r25, Y+13	; 0x0d
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <M_DIO_void_setPinValue+0x30>
    187c:	4f c0       	rjmp	.+158    	; 0x191c <M_DIO_void_setPinValue+0xce>
    187e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1880:	3d 85       	ldd	r19, Y+13	; 0x0d
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	2c f4       	brge	.+10     	; 0x1892 <M_DIO_void_setPinValue+0x44>
    1888:	8c 85       	ldd	r24, Y+12	; 0x0c
    188a:	9d 85       	ldd	r25, Y+13	; 0x0d
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	71 f0       	breq	.+28     	; 0x18ac <M_DIO_void_setPinValue+0x5e>
    1890:	ec c0       	rjmp	.+472    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
    1892:	2c 85       	ldd	r18, Y+12	; 0x0c
    1894:	3d 85       	ldd	r19, Y+13	; 0x0d
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <M_DIO_void_setPinValue+0x50>
    189c:	77 c0       	rjmp	.+238    	; 0x198c <M_DIO_void_setPinValue+0x13e>
    189e:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <M_DIO_void_setPinValue+0x5c>
    18a8:	a9 c0       	rjmp	.+338    	; 0x19fc <M_DIO_void_setPinValue+0x1ae>
    18aa:	df c0       	rjmp	.+446    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
		{
		case PORTA_ID :
			switch (value)
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3b 87       	std	Y+11, r19	; 0x0b
    18b4:	2a 87       	std	Y+10, r18	; 0x0a
    18b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	31 f0       	breq	.+12     	; 0x18ca <M_DIO_void_setPinValue+0x7c>
    18be:	2a 85       	ldd	r18, Y+10	; 0x0a
    18c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    18c2:	21 30       	cpi	r18, 0x01	; 1
    18c4:	31 05       	cpc	r19, r1
    18c6:	b1 f0       	breq	.+44     	; 0x18f4 <M_DIO_void_setPinValue+0xa6>
    18c8:	d0 c0       	rjmp	.+416    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <M_DIO_void_setPinValue+0x9a>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <M_DIO_void_setPinValue+0x96>
    18ec:	80 95       	com	r24
    18ee:	84 23       	and	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	bb c0       	rjmp	.+374    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    18f4:	ab e3       	ldi	r26, 0x3B	; 59
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	eb e3       	ldi	r30, 0x3B	; 59
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <M_DIO_void_setPinValue+0xc4>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <M_DIO_void_setPinValue+0xc0>
    1916:	84 2b       	or	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	a7 c0       	rjmp	.+334    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	39 87       	std	Y+9, r19	; 0x09
    1924:	28 87       	std	Y+8, r18	; 0x08
    1926:	88 85       	ldd	r24, Y+8	; 0x08
    1928:	99 85       	ldd	r25, Y+9	; 0x09
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	31 f0       	breq	.+12     	; 0x193a <M_DIO_void_setPinValue+0xec>
    192e:	28 85       	ldd	r18, Y+8	; 0x08
    1930:	39 85       	ldd	r19, Y+9	; 0x09
    1932:	21 30       	cpi	r18, 0x01	; 1
    1934:	31 05       	cpc	r19, r1
    1936:	b1 f0       	breq	.+44     	; 0x1964 <M_DIO_void_setPinValue+0x116>
    1938:	98 c0       	rjmp	.+304    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    193a:	a8 e3       	ldi	r26, 0x38	; 56
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <M_DIO_void_setPinValue+0x10a>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <M_DIO_void_setPinValue+0x106>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	83 c0       	rjmp	.+262    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1964:	a8 e3       	ldi	r26, 0x38	; 56
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e8 e3       	ldi	r30, 0x38	; 56
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <M_DIO_void_setPinValue+0x134>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <M_DIO_void_setPinValue+0x130>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	6f c0       	rjmp	.+222    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3f 83       	std	Y+7, r19	; 0x07
    1994:	2e 83       	std	Y+6, r18	; 0x06
    1996:	8e 81       	ldd	r24, Y+6	; 0x06
    1998:	9f 81       	ldd	r25, Y+7	; 0x07
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	31 f0       	breq	.+12     	; 0x19aa <M_DIO_void_setPinValue+0x15c>
    199e:	2e 81       	ldd	r18, Y+6	; 0x06
    19a0:	3f 81       	ldd	r19, Y+7	; 0x07
    19a2:	21 30       	cpi	r18, 0x01	; 1
    19a4:	31 05       	cpc	r19, r1
    19a6:	b1 f0       	breq	.+44     	; 0x19d4 <M_DIO_void_setPinValue+0x186>
    19a8:	60 c0       	rjmp	.+192    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    19aa:	a5 e3       	ldi	r26, 0x35	; 53
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e5 e3       	ldi	r30, 0x35	; 53
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <M_DIO_void_setPinValue+0x17a>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <M_DIO_void_setPinValue+0x176>
    19cc:	80 95       	com	r24
    19ce:	84 23       	and	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	4b c0       	rjmp	.+150    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    19d4:	a5 e3       	ldi	r26, 0x35	; 53
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e3       	ldi	r30, 0x35	; 53
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <M_DIO_void_setPinValue+0x1a4>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <M_DIO_void_setPinValue+0x1a0>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	37 c0       	rjmp	.+110    	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3d 83       	std	Y+5, r19	; 0x05
    1a04:	2c 83       	std	Y+4, r18	; 0x04
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <M_DIO_void_setPinValue+0x1cc>
    1a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a10:	3d 81       	ldd	r19, Y+5	; 0x05
    1a12:	21 30       	cpi	r18, 0x01	; 1
    1a14:	31 05       	cpc	r19, r1
    1a16:	b1 f0       	breq	.+44     	; 0x1a44 <M_DIO_void_setPinValue+0x1f6>
    1a18:	28 c0       	rjmp	.+80     	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    1a1a:	a2 e3       	ldi	r26, 0x32	; 50
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e2 e3       	ldi	r30, 0x32	; 50
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <M_DIO_void_setPinValue+0x1ea>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <M_DIO_void_setPinValue+0x1e6>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	13 c0       	rjmp	.+38     	; 0x1a6a <M_DIO_void_setPinValue+0x21c>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1a44:	a2 e3       	ldi	r26, 0x32	; 50
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e2 e3       	ldi	r30, 0x32	; 50
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <M_DIO_void_setPinValue+0x214>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <M_DIO_void_setPinValue+0x210>
    1a66:	84 2b       	or	r24, r20
    1a68:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1a6a:	2d 96       	adiw	r28, 0x0d	; 13
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <M_DIO_void_getPinValue+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <M_DIO_void_getPinValue+0x8>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <M_DIO_void_getPinValue+0xa>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	6a 83       	std	Y+2, r22	; 0x02
    1a8e:	5c 83       	std	Y+4, r21	; 0x04
    1a90:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3e 83       	std	Y+6, r19	; 0x06
    1a9a:	2d 83       	std	Y+5, r18	; 0x05
    1a9c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a9e:	5e 81       	ldd	r21, Y+6	; 0x06
    1aa0:	41 30       	cpi	r20, 0x01	; 1
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	59 f1       	breq	.+86     	; 0x1afc <M_DIO_void_getPinValue+0x80>
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	91 05       	cpc	r25, r1
    1aae:	34 f4       	brge	.+12     	; 0x1abc <M_DIO_void_getPinValue+0x40>
    1ab0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab4:	21 15       	cp	r18, r1
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	69 f0       	breq	.+26     	; 0x1ad4 <M_DIO_void_getPinValue+0x58>
    1aba:	5b c0       	rjmp	.+182    	; 0x1b72 <M_DIO_void_getPinValue+0xf6>
    1abc:	4d 81       	ldd	r20, Y+5	; 0x05
    1abe:	5e 81       	ldd	r21, Y+6	; 0x06
    1ac0:	42 30       	cpi	r20, 0x02	; 2
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	79 f1       	breq	.+94     	; 0x1b24 <M_DIO_void_getPinValue+0xa8>
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <M_DIO_void_getPinValue+0x56>
    1ad0:	3d c0       	rjmp	.+122    	; 0x1b4c <M_DIO_void_getPinValue+0xd0>
    1ad2:	4f c0       	rjmp	.+158    	; 0x1b72 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    1ad4:	e9 e3       	ldi	r30, 0x39	; 57
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <M_DIO_void_getPinValue+0x70>
    1ae8:	55 95       	asr	r21
    1aea:	47 95       	ror	r20
    1aec:	8a 95       	dec	r24
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <M_DIO_void_getPinValue+0x6c>
    1af0:	ca 01       	movw	r24, r20
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	eb 81       	ldd	r30, Y+3	; 0x03
    1af6:	fc 81       	ldd	r31, Y+4	; 0x04
    1af8:	80 83       	st	Z, r24
    1afa:	3b c0       	rjmp	.+118    	; 0x1b72 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    1afc:	e6 e3       	ldi	r30, 0x36	; 54
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a9 01       	movw	r20, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <M_DIO_void_getPinValue+0x98>
    1b10:	55 95       	asr	r21
    1b12:	47 95       	ror	r20
    1b14:	8a 95       	dec	r24
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <M_DIO_void_getPinValue+0x94>
    1b18:	ca 01       	movw	r24, r20
    1b1a:	81 70       	andi	r24, 0x01	; 1
    1b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b20:	80 83       	st	Z, r24
    1b22:	27 c0       	rjmp	.+78     	; 0x1b72 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1b24:	e3 e3       	ldi	r30, 0x33	; 51
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <M_DIO_void_getPinValue+0xc0>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <M_DIO_void_getPinValue+0xbc>
    1b40:	ca 01       	movw	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	80 83       	st	Z, r24
    1b4a:	13 c0       	rjmp	.+38     	; 0x1b72 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1b4c:	e0 e3       	ldi	r30, 0x30	; 48
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <M_DIO_void_getPinValue+0xe8>
    1b60:	55 95       	asr	r21
    1b62:	47 95       	ror	r20
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <M_DIO_void_getPinValue+0xe4>
    1b68:	ca 01       	movw	r24, r20
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b70:	80 83       	st	Z, r24
		break;
	}
}
    1b72:	26 96       	adiw	r28, 0x06	; 6
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <M_DIO_void_TogPinValue+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <M_DIO_void_TogPinValue+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3c 83       	std	Y+4, r19	; 0x04
    1b9c:	2b 83       	std	Y+3, r18	; 0x03
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	81 30       	cpi	r24, 0x01	; 1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	49 f1       	breq	.+82     	; 0x1bfa <M_DIO_void_TogPinValue+0x76>
    1ba8:	2b 81       	ldd	r18, Y+3	; 0x03
    1baa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bac:	22 30       	cpi	r18, 0x02	; 2
    1bae:	31 05       	cpc	r19, r1
    1bb0:	2c f4       	brge	.+10     	; 0x1bbc <M_DIO_void_TogPinValue+0x38>
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	61 f0       	breq	.+24     	; 0x1bd2 <M_DIO_void_TogPinValue+0x4e>
    1bba:	5a c0       	rjmp	.+180    	; 0x1c70 <M_DIO_void_TogPinValue+0xec>
    1bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	71 f1       	breq	.+92     	; 0x1c22 <M_DIO_void_TogPinValue+0x9e>
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	e9 f1       	breq	.+122    	; 0x1c4a <M_DIO_void_TogPinValue+0xc6>
    1bd0:	4f c0       	rjmp	.+158    	; 0x1c70 <M_DIO_void_TogPinValue+0xec>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <M_DIO_void_TogPinValue+0x6c>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <M_DIO_void_TogPinValue+0x68>
    1bf4:	84 27       	eor	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	3b c0       	rjmp	.+118    	; 0x1c70 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    1bfa:	a8 e3       	ldi	r26, 0x38	; 56
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e8 e3       	ldi	r30, 0x38	; 56
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <M_DIO_void_TogPinValue+0x94>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <M_DIO_void_TogPinValue+0x90>
    1c1c:	84 27       	eor	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	27 c0       	rjmp	.+78     	; 0x1c70 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1c22:	a5 e3       	ldi	r26, 0x35	; 53
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e3       	ldi	r30, 0x35	; 53
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <M_DIO_void_TogPinValue+0xbc>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <M_DIO_void_TogPinValue+0xb8>
    1c44:	84 27       	eor	r24, r20
    1c46:	8c 93       	st	X, r24
    1c48:	13 c0       	rjmp	.+38     	; 0x1c70 <M_DIO_void_TogPinValue+0xec>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1c4a:	a2 e3       	ldi	r26, 0x32	; 50
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e2 e3       	ldi	r30, 0x32	; 50
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <M_DIO_void_TogPinValue+0xe4>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <M_DIO_void_TogPinValue+0xe0>
    1c6c:	84 27       	eor	r24, r20
    1c6e:	8c 93       	st	X, r24
			break;
		}


}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <H_SSD_void_init>:



//u8 arr[]={0x3f,};
void H_SSD_void_init(void)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_setPinDir(SSD_LED_A_PORT,  SSD_LED_A_PIN , OUT);
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	61 e0       	ldi	r22, 0x01	; 1
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_B_PORT,  SSD_LED_B_PIN , OUT);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_C_PORT,  SSD_LED_C_PIN , OUT);
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	63 e0       	ldi	r22, 0x03	; 3
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_D_PORT,  SSD_LED_D_PIN , OUT);
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	64 e0       	ldi	r22, 0x04	; 4
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_E_PORT,  SSD_LED_E_PIN , OUT);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	65 e0       	ldi	r22, 0x05	; 5
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_F_PORT,  SSD_LED_F_PIN , OUT);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	66 e0       	ldi	r22, 0x06	; 6
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_G_PORT,  SSD_LED_G_PIN , OUT);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	67 e0       	ldi	r22, 0x07	; 7
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_LED_DOT_PORT,  SSD_LED_DOT_PIN , OUT);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>

	//ENABLE DIGITS 1

	M_DIO_void_setPinDir(SSD_DIG_1_EN_PORT,  SSD_DIG_1_EN_PIN , OUT);
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	66 e0       	ldi	r22, 0x06	; 6
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(SSD_DIG_2_EN_PORT,  SSD_DIG_2_EN_PIN , OUT);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	67 e0       	ldi	r22, 0x07	; 7
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <H_SSD_void_DisplayNumber>:
void H_SSD_void_DisplayNumber(u8 number)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	a7 97       	sbiw	r28, 0x27	; 39
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	8b a3       	std	Y+35, r24	; 0x23
	if(number>99)
    1d06:	8b a1       	ldd	r24, Y+35	; 0x23
    1d08:	84 36       	cpi	r24, 0x64	; 100
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <H_SSD_void_DisplayNumber+0x1e>
    1d0c:	04 c5       	rjmp	.+2568   	; 0x2716 <H_SSD_void_DisplayNumber+0xa26>
	{
		return;
	}
	u32 i ;
	u8 units =number % 10;
    1d0e:	8b a1       	ldd	r24, Y+35	; 0x23
    1d10:	9a e0       	ldi	r25, 0x0A	; 10
    1d12:	69 2f       	mov	r22, r25
    1d14:	0e 94 b2 22 	call	0x4564	; 0x4564 <__udivmodqi4>
    1d18:	89 2f       	mov	r24, r25
    1d1a:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    1d1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1d1e:	9a e0       	ldi	r25, 0x0A	; 10
    1d20:	69 2f       	mov	r22, r25
    1d22:	0e 94 b2 22 	call	0x4564	; 0x4564 <__udivmodqi4>
    1d26:	8d 8f       	std	Y+29, r24	; 0x1d
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    1d28:	1f 8e       	std	Y+31, r1	; 0x1f
    1d2a:	18 a2       	std	Y+32, r1	; 0x20
    1d2c:	19 a2       	std	Y+33, r1	; 0x21
    1d2e:	1a a2       	std	Y+34, r1	; 0x22
    1d30:	e8 c4       	rjmp	.+2512   	; 0x2702 <H_SSD_void_DisplayNumber+0xa12>

		switch (units)
    1d32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3f a3       	std	Y+39, r19	; 0x27
    1d3a:	2e a3       	std	Y+38, r18	; 0x26
    1d3c:	8e a1       	ldd	r24, Y+38	; 0x26
    1d3e:	9f a1       	ldd	r25, Y+39	; 0x27
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	91 05       	cpc	r25, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <H_SSD_void_DisplayNumber+0x58>
    1d46:	f0 c0       	rjmp	.+480    	; 0x1f28 <H_SSD_void_DisplayNumber+0x238>
    1d48:	2e a1       	ldd	r18, Y+38	; 0x26
    1d4a:	3f a1       	ldd	r19, Y+39	; 0x27
    1d4c:	25 30       	cpi	r18, 0x05	; 5
    1d4e:	31 05       	cpc	r19, r1
    1d50:	ec f4       	brge	.+58     	; 0x1d8c <H_SSD_void_DisplayNumber+0x9c>
    1d52:	8e a1       	ldd	r24, Y+38	; 0x26
    1d54:	9f a1       	ldd	r25, Y+39	; 0x27
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <H_SSD_void_DisplayNumber+0x6e>
    1d5c:	6a c0       	rjmp	.+212    	; 0x1e32 <H_SSD_void_DisplayNumber+0x142>
    1d5e:	2e a1       	ldd	r18, Y+38	; 0x26
    1d60:	3f a1       	ldd	r19, Y+39	; 0x27
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <H_SSD_void_DisplayNumber+0x82>
    1d68:	8e a1       	ldd	r24, Y+38	; 0x26
    1d6a:	9f a1       	ldd	r25, Y+39	; 0x27
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	99 f1       	breq	.+102    	; 0x1dd6 <H_SSD_void_DisplayNumber+0xe6>
    1d70:	d0 c1       	rjmp	.+928    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
    1d72:	2e a1       	ldd	r18, Y+38	; 0x26
    1d74:	3f a1       	ldd	r19, Y+39	; 0x27
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <H_SSD_void_DisplayNumber+0x8e>
    1d7c:	83 c0       	rjmp	.+262    	; 0x1e84 <H_SSD_void_DisplayNumber+0x194>
    1d7e:	8e a1       	ldd	r24, Y+38	; 0x26
    1d80:	9f a1       	ldd	r25, Y+39	; 0x27
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <H_SSD_void_DisplayNumber+0x9a>
    1d88:	a6 c0       	rjmp	.+332    	; 0x1ed6 <H_SSD_void_DisplayNumber+0x1e6>
    1d8a:	c3 c1       	rjmp	.+902    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
    1d8c:	2e a1       	ldd	r18, Y+38	; 0x26
    1d8e:	3f a1       	ldd	r19, Y+39	; 0x27
    1d90:	27 30       	cpi	r18, 0x07	; 7
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <H_SSD_void_DisplayNumber+0xa8>
    1d96:	43 c1       	rjmp	.+646    	; 0x201e <H_SSD_void_DisplayNumber+0x32e>
    1d98:	8e a1       	ldd	r24, Y+38	; 0x26
    1d9a:	9f a1       	ldd	r25, Y+39	; 0x27
    1d9c:	88 30       	cpi	r24, 0x08	; 8
    1d9e:	91 05       	cpc	r25, r1
    1da0:	6c f4       	brge	.+26     	; 0x1dbc <H_SSD_void_DisplayNumber+0xcc>
    1da2:	2e a1       	ldd	r18, Y+38	; 0x26
    1da4:	3f a1       	ldd	r19, Y+39	; 0x27
    1da6:	25 30       	cpi	r18, 0x05	; 5
    1da8:	31 05       	cpc	r19, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <H_SSD_void_DisplayNumber+0xbe>
    1dac:	e6 c0       	rjmp	.+460    	; 0x1f7a <H_SSD_void_DisplayNumber+0x28a>
    1dae:	8e a1       	ldd	r24, Y+38	; 0x26
    1db0:	9f a1       	ldd	r25, Y+39	; 0x27
    1db2:	86 30       	cpi	r24, 0x06	; 6
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <H_SSD_void_DisplayNumber+0xca>
    1db8:	09 c1       	rjmp	.+530    	; 0x1fcc <H_SSD_void_DisplayNumber+0x2dc>
    1dba:	ab c1       	rjmp	.+854    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
    1dbc:	2e a1       	ldd	r18, Y+38	; 0x26
    1dbe:	3f a1       	ldd	r19, Y+39	; 0x27
    1dc0:	28 30       	cpi	r18, 0x08	; 8
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <H_SSD_void_DisplayNumber+0xd8>
    1dc6:	54 c1       	rjmp	.+680    	; 0x2070 <H_SSD_void_DisplayNumber+0x380>
    1dc8:	8e a1       	ldd	r24, Y+38	; 0x26
    1dca:	9f a1       	ldd	r25, Y+39	; 0x27
    1dcc:	89 30       	cpi	r24, 0x09	; 9
    1dce:	91 05       	cpc	r25, r1
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <H_SSD_void_DisplayNumber+0xe4>
    1dd2:	77 c1       	rjmp	.+750    	; 0x20c2 <H_SSD_void_DisplayNumber+0x3d2>
    1dd4:	9e c1       	rjmp	.+828    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
		{
		case 0:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	62 e0       	ldi	r22, 0x02	; 2
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	65 e0       	ldi	r22, 0x05	; 5
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	67 e0       	ldi	r22, 0x07	; 7
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1e30:	70 c1       	rjmp	.+736    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 1:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	63 e0       	ldi	r22, 0x03	; 3
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	64 e0       	ldi	r22, 0x04	; 4
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	65 e0       	ldi	r22, 0x05	; 5
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	66 e0       	ldi	r22, 0x06	; 6
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	67 e0       	ldi	r22, 0x07	; 7
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1e82:	47 c1       	rjmp	.+654    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 2:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	62 e0       	ldi	r22, 0x02	; 2
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	63 e0       	ldi	r22, 0x03	; 3
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	64 e0       	ldi	r22, 0x04	; 4
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	65 e0       	ldi	r22, 0x05	; 5
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	66 e0       	ldi	r22, 0x06	; 6
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	67 e0       	ldi	r22, 0x07	; 7
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1ed4:	1e c1       	rjmp	.+572    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 3:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	62 e0       	ldi	r22, 0x02	; 2
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	63 e0       	ldi	r22, 0x03	; 3
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	64 e0       	ldi	r22, 0x04	; 4
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	65 e0       	ldi	r22, 0x05	; 5
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	66 e0       	ldi	r22, 0x06	; 6
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	67 e0       	ldi	r22, 0x07	; 7
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1f26:	f5 c0       	rjmp	.+490    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 4:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	62 e0       	ldi	r22, 0x02	; 2
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	63 e0       	ldi	r22, 0x03	; 3
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	64 e0       	ldi	r22, 0x04	; 4
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	65 e0       	ldi	r22, 0x05	; 5
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	66 e0       	ldi	r22, 0x06	; 6
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	67 e0       	ldi	r22, 0x07	; 7
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1f78:	cc c0       	rjmp	.+408    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;

		case 5:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	61 e0       	ldi	r22, 0x01	; 1
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	65 e0       	ldi	r22, 0x05	; 5
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	66 e0       	ldi	r22, 0x06	; 6
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	67 e0       	ldi	r22, 0x07	; 7
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    1fca:	a3 c0       	rjmp	.+326    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 6:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	62 e0       	ldi	r22, 0x02	; 2
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	64 e0       	ldi	r22, 0x04	; 4
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	65 e0       	ldi	r22, 0x05	; 5
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	66 e0       	ldi	r22, 0x06	; 6
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	67 e0       	ldi	r22, 0x07	; 7
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    201c:	7a c0       	rjmp	.+244    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 7:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	62 e0       	ldi	r22, 0x02	; 2
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	64 e0       	ldi	r22, 0x04	; 4
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	65 e0       	ldi	r22, 0x05	; 5
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	66 e0       	ldi	r22, 0x06	; 6
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	67 e0       	ldi	r22, 0x07	; 7
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    206e:	51 c0       	rjmp	.+162    	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 8:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	62 e0       	ldi	r22, 0x02	; 2
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	63 e0       	ldi	r22, 0x03	; 3
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	64 e0       	ldi	r22, 0x04	; 4
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	65 e0       	ldi	r22, 0x05	; 5
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	66 e0       	ldi	r22, 0x06	; 6
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	67 e0       	ldi	r22, 0x07	; 7
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    20c0:	28 c0       	rjmp	.+80     	; 0x2112 <H_SSD_void_DisplayNumber+0x422>
			break;
		case 9:
			M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	63 e0       	ldi	r22, 0x03	; 3
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	64 e0       	ldi	r22, 0x04	; 4
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	65 e0       	ldi	r22, 0x05	; 5
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	66 e0       	ldi	r22, 0x06	; 6
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	67 e0       	ldi	r22, 0x07	; 7
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>


		}
		//enable digit 1
		//disable digit 2
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,HIGH);
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	66 e0       	ldi	r22, 0x06	; 6
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	67 e0       	ldi	r22, 0x07	; 7
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	89 8f       	std	Y+25, r24	; 0x19
    2130:	9a 8f       	std	Y+26, r25	; 0x1a
    2132:	ab 8f       	std	Y+27, r26	; 0x1b
    2134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	69 8d       	ldd	r22, Y+25	; 0x19
    2138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	48 ec       	ldi	r20, 0xC8	; 200
    2144:	53 e4       	ldi	r21, 0x43	; 67
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	8d 8b       	std	Y+21, r24	; 0x15
    2150:	9e 8b       	std	Y+22, r25	; 0x16
    2152:	af 8b       	std	Y+23, r26	; 0x17
    2154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2156:	6d 89       	ldd	r22, Y+21	; 0x15
    2158:	7e 89       	ldd	r23, Y+22	; 0x16
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <H_SSD_void_DisplayNumber+0x488>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 8b       	std	Y+20, r25	; 0x14
    2174:	8b 8b       	std	Y+19, r24	; 0x13
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <H_SSD_void_DisplayNumber+0x506>
	else if (__tmp > 65535)
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <H_SSD_void_DisplayNumber+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <H_SSD_void_DisplayNumber+0x4e8>
    21ba:	88 e2       	ldi	r24, 0x28	; 40
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9a 8b       	std	Y+18, r25	; 0x12
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c2:	89 89       	ldd	r24, Y+17	; 0x11
    21c4:	9a 89       	ldd	r25, Y+18	; 0x12
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <H_SSD_void_DisplayNumber+0x4d6>
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <H_SSD_void_DisplayNumber+0x4ca>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <H_SSD_void_DisplayNumber+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	98 8b       	std	Y+16, r25	; 0x10
    21fc:	8f 87       	std	Y+15, r24	; 0x0f
    21fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2200:	98 89       	ldd	r25, Y+16	; 0x10
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <H_SSD_void_DisplayNumber+0x512>
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_1_EN_PORT,SSD_DIG_1_EN_PIN,LOW);
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	66 e0       	ldi	r22, 0x06	; 6
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
		switch (tens)
    2214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	3d a3       	std	Y+37, r19	; 0x25
    221c:	2c a3       	std	Y+36, r18	; 0x24
    221e:	8c a1       	ldd	r24, Y+36	; 0x24
    2220:	9d a1       	ldd	r25, Y+37	; 0x25
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	91 05       	cpc	r25, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <H_SSD_void_DisplayNumber+0x53a>
    2228:	f0 c0       	rjmp	.+480    	; 0x240a <H_SSD_void_DisplayNumber+0x71a>
    222a:	2c a1       	ldd	r18, Y+36	; 0x24
    222c:	3d a1       	ldd	r19, Y+37	; 0x25
    222e:	25 30       	cpi	r18, 0x05	; 5
    2230:	31 05       	cpc	r19, r1
    2232:	ec f4       	brge	.+58     	; 0x226e <H_SSD_void_DisplayNumber+0x57e>
    2234:	8c a1       	ldd	r24, Y+36	; 0x24
    2236:	9d a1       	ldd	r25, Y+37	; 0x25
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	91 05       	cpc	r25, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <H_SSD_void_DisplayNumber+0x550>
    223e:	6a c0       	rjmp	.+212    	; 0x2314 <H_SSD_void_DisplayNumber+0x624>
    2240:	2c a1       	ldd	r18, Y+36	; 0x24
    2242:	3d a1       	ldd	r19, Y+37	; 0x25
    2244:	22 30       	cpi	r18, 0x02	; 2
    2246:	31 05       	cpc	r19, r1
    2248:	2c f4       	brge	.+10     	; 0x2254 <H_SSD_void_DisplayNumber+0x564>
    224a:	8c a1       	ldd	r24, Y+36	; 0x24
    224c:	9d a1       	ldd	r25, Y+37	; 0x25
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	99 f1       	breq	.+102    	; 0x22b8 <H_SSD_void_DisplayNumber+0x5c8>
    2252:	d0 c1       	rjmp	.+928    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
    2254:	2c a1       	ldd	r18, Y+36	; 0x24
    2256:	3d a1       	ldd	r19, Y+37	; 0x25
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	31 05       	cpc	r19, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <H_SSD_void_DisplayNumber+0x570>
    225e:	83 c0       	rjmp	.+262    	; 0x2366 <H_SSD_void_DisplayNumber+0x676>
    2260:	8c a1       	ldd	r24, Y+36	; 0x24
    2262:	9d a1       	ldd	r25, Y+37	; 0x25
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	91 05       	cpc	r25, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <H_SSD_void_DisplayNumber+0x57c>
    226a:	a6 c0       	rjmp	.+332    	; 0x23b8 <H_SSD_void_DisplayNumber+0x6c8>
    226c:	c3 c1       	rjmp	.+902    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
    226e:	2c a1       	ldd	r18, Y+36	; 0x24
    2270:	3d a1       	ldd	r19, Y+37	; 0x25
    2272:	27 30       	cpi	r18, 0x07	; 7
    2274:	31 05       	cpc	r19, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <H_SSD_void_DisplayNumber+0x58a>
    2278:	43 c1       	rjmp	.+646    	; 0x2500 <H_SSD_void_DisplayNumber+0x810>
    227a:	8c a1       	ldd	r24, Y+36	; 0x24
    227c:	9d a1       	ldd	r25, Y+37	; 0x25
    227e:	88 30       	cpi	r24, 0x08	; 8
    2280:	91 05       	cpc	r25, r1
    2282:	6c f4       	brge	.+26     	; 0x229e <H_SSD_void_DisplayNumber+0x5ae>
    2284:	2c a1       	ldd	r18, Y+36	; 0x24
    2286:	3d a1       	ldd	r19, Y+37	; 0x25
    2288:	25 30       	cpi	r18, 0x05	; 5
    228a:	31 05       	cpc	r19, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <H_SSD_void_DisplayNumber+0x5a0>
    228e:	e6 c0       	rjmp	.+460    	; 0x245c <H_SSD_void_DisplayNumber+0x76c>
    2290:	8c a1       	ldd	r24, Y+36	; 0x24
    2292:	9d a1       	ldd	r25, Y+37	; 0x25
    2294:	86 30       	cpi	r24, 0x06	; 6
    2296:	91 05       	cpc	r25, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <H_SSD_void_DisplayNumber+0x5ac>
    229a:	09 c1       	rjmp	.+530    	; 0x24ae <H_SSD_void_DisplayNumber+0x7be>
    229c:	ab c1       	rjmp	.+854    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
    229e:	2c a1       	ldd	r18, Y+36	; 0x24
    22a0:	3d a1       	ldd	r19, Y+37	; 0x25
    22a2:	28 30       	cpi	r18, 0x08	; 8
    22a4:	31 05       	cpc	r19, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <H_SSD_void_DisplayNumber+0x5ba>
    22a8:	54 c1       	rjmp	.+680    	; 0x2552 <H_SSD_void_DisplayNumber+0x862>
    22aa:	8c a1       	ldd	r24, Y+36	; 0x24
    22ac:	9d a1       	ldd	r25, Y+37	; 0x25
    22ae:	89 30       	cpi	r24, 0x09	; 9
    22b0:	91 05       	cpc	r25, r1
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <H_SSD_void_DisplayNumber+0x5c6>
    22b4:	77 c1       	rjmp	.+750    	; 0x25a4 <H_SSD_void_DisplayNumber+0x8b4>
    22b6:	9e c1       	rjmp	.+828    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
		{
		case 0:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	63 e0       	ldi	r22, 0x03	; 3
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	64 e0       	ldi	r22, 0x04	; 4
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	65 e0       	ldi	r22, 0x05	; 5
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	66 e0       	ldi	r22, 0x06	; 6
    22ee:	41 e0       	ldi	r20, 0x01	; 1
    22f0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	67 e0       	ldi	r22, 0x07	; 7
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2312:	70 c1       	rjmp	.+736    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 1:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	62 e0       	ldi	r22, 0x02	; 2
    2322:	41 e0       	ldi	r20, 0x01	; 1
    2324:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	63 e0       	ldi	r22, 0x03	; 3
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	64 e0       	ldi	r22, 0x04	; 4
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	65 e0       	ldi	r22, 0x05	; 5
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	66 e0       	ldi	r22, 0x06	; 6
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	67 e0       	ldi	r22, 0x07	; 7
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2364:	47 c1       	rjmp	.+654    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 2:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	61 e0       	ldi	r22, 0x01	; 1
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	62 e0       	ldi	r22, 0x02	; 2
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,LOW);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	63 e0       	ldi	r22, 0x03	; 3
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	64 e0       	ldi	r22, 0x04	; 4
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	65 e0       	ldi	r22, 0x05	; 5
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	67 e0       	ldi	r22, 0x07	; 7
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	40 e0       	ldi	r20, 0x00	; 0
    23b2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    23b6:	1e c1       	rjmp	.+572    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 3:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	63 e0       	ldi	r22, 0x03	; 3
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	64 e0       	ldi	r22, 0x04	; 4
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	66 e0       	ldi	r22, 0x06	; 6
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2408:	f5 c0       	rjmp	.+490    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 4:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,LOW);
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	61 e0       	ldi	r22, 0x01	; 1
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	62 e0       	ldi	r22, 0x02	; 2
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	63 e0       	ldi	r22, 0x03	; 3
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	66 e0       	ldi	r22, 0x06	; 6
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	67 e0       	ldi	r22, 0x07	; 7
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    245a:	cc c0       	rjmp	.+408    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;

				case 5:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	64 e0       	ldi	r22, 0x04	; 4
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	67 e0       	ldi	r22, 0x07	; 7
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	60 e0       	ldi	r22, 0x00	; 0
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    24ac:	a3 c0       	rjmp	.+326    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 6:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	61 e0       	ldi	r22, 0x01	; 1
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,LOW);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	62 e0       	ldi	r22, 0x02	; 2
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	63 e0       	ldi	r22, 0x03	; 3
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	65 e0       	ldi	r22, 0x05	; 5
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	66 e0       	ldi	r22, 0x06	; 6
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	67 e0       	ldi	r22, 0x07	; 7
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    24fe:	7a c0       	rjmp	.+244    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 7:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	63 e0       	ldi	r22, 0x03	; 3
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,LOW);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	64 e0       	ldi	r22, 0x04	; 4
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	65 e0       	ldi	r22, 0x05	; 5
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,LOW);
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	66 e0       	ldi	r22, 0x06	; 6
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,LOW);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	67 e0       	ldi	r22, 0x07	; 7
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2550:	51 c0       	rjmp	.+162    	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 8:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	61 e0       	ldi	r22, 0x01	; 1
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	64 e0       	ldi	r22, 0x04	; 4
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,HIGH);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	65 e0       	ldi	r22, 0x05	; 5
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	66 e0       	ldi	r22, 0x06	; 6
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	67 e0       	ldi	r22, 0x07	; 7
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    25a2:	28 c0       	rjmp	.+80     	; 0x25f4 <H_SSD_void_DisplayNumber+0x904>
					break;
				case 9:
					M_DIO_void_setPinValue(SSD_LED_A_PORT,SSD_LED_A_PIN,HIGH);
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_B_PORT,SSD_LED_B_PIN,HIGH);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	62 e0       	ldi	r22, 0x02	; 2
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_C_PORT,SSD_LED_C_PIN,HIGH);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_D_PORT,SSD_LED_D_PIN,HIGH);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	64 e0       	ldi	r22, 0x04	; 4
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_E_PORT,SSD_LED_E_PIN,LOW);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	65 e0       	ldi	r22, 0x05	; 5
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_F_PORT,SSD_LED_F_PIN,HIGH);
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	66 e0       	ldi	r22, 0x06	; 6
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_G_PORT,SSD_LED_G_PIN,HIGH);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	67 e0       	ldi	r22, 0x07	; 7
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
					M_DIO_void_setPinValue(SSD_LED_DOT_PORT,SSD_LED_DOT_PIN,LOW);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>



				}
		//enable digit 2
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);
    25f4:	82 e0       	ldi	r24, 0x02	; 2
    25f6:	67 e0       	ldi	r22, 0x07	; 7
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a0 e8       	ldi	r26, 0x80	; 128
    2604:	bf e3       	ldi	r27, 0x3F	; 63
    2606:	8b 87       	std	Y+11, r24	; 0x0b
    2608:	9c 87       	std	Y+12, r25	; 0x0c
    260a:	ad 87       	std	Y+13, r26	; 0x0d
    260c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2610:	7c 85       	ldd	r23, Y+12	; 0x0c
    2612:	8d 85       	ldd	r24, Y+13	; 0x0d
    2614:	9e 85       	ldd	r25, Y+14	; 0x0e
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	48 ec       	ldi	r20, 0xC8	; 200
    261c:	53 e4       	ldi	r21, 0x43	; 67
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8f 83       	std	Y+7, r24	; 0x07
    2628:	98 87       	std	Y+8, r25	; 0x08
    262a:	a9 87       	std	Y+9, r26	; 0x09
    262c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <H_SSD_void_DisplayNumber+0x960>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <H_SSD_void_DisplayNumber+0x9de>
	else if (__tmp > 65535)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <H_SSD_void_DisplayNumber+0x9ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	6b 85       	ldd	r22, Y+11	; 0x0b
    266a:	7c 85       	ldd	r23, Y+12	; 0x0c
    266c:	8d 85       	ldd	r24, Y+13	; 0x0d
    266e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <H_SSD_void_DisplayNumber+0x9c0>
    2692:	88 e2       	ldi	r24, 0x28	; 40
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <H_SSD_void_DisplayNumber+0x9ae>
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <H_SSD_void_DisplayNumber+0x9a2>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <H_SSD_void_DisplayNumber+0x9f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	8d 81       	ldd	r24, Y+5	; 0x05
    26d0:	9e 81       	ldd	r25, Y+6	; 0x06
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <H_SSD_void_DisplayNumber+0x9ea>
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	67 e0       	ldi	r22, 0x07	; 7
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
		return;
	}
	u32 i ;
	u8 units =number % 10;
	u8 tens = number/10;
	for(i=0;i<SSD_DISPLAYY_TIME ;i++){
    26ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ee:	98 a1       	ldd	r25, Y+32	; 0x20
    26f0:	a9 a1       	ldd	r26, Y+33	; 0x21
    26f2:	ba a1       	ldd	r27, Y+34	; 0x22
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	a1 1d       	adc	r26, r1
    26f8:	b1 1d       	adc	r27, r1
    26fa:	8f 8f       	std	Y+31, r24	; 0x1f
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	a9 a3       	std	Y+33, r26	; 0x21
    2700:	ba a3       	std	Y+34, r27	; 0x22
    2702:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2704:	98 a1       	ldd	r25, Y+32	; 0x20
    2706:	a9 a1       	ldd	r26, Y+33	; 0x21
    2708:	ba a1       	ldd	r27, Y+34	; 0x22
    270a:	8a 3f       	cpi	r24, 0xFA	; 250
    270c:	91 05       	cpc	r25, r1
    270e:	a1 05       	cpc	r26, r1
    2710:	b1 05       	cpc	r27, r1
    2712:	08 f4       	brcc	.+2      	; 0x2716 <H_SSD_void_DisplayNumber+0xa26>
    2714:	0e cb       	rjmp	.-2532   	; 0x1d32 <H_SSD_void_DisplayNumber+0x42>
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,HIGH);

		_delay_ms(1);
		M_DIO_void_setPinValue(SSD_DIG_2_EN_PORT,SSD_DIG_2_EN_PIN,LOW);
	}
}
    2716:	a7 96       	adiw	r28, 0x27	; 39
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <H_PB_void_init>:
#include"PB_int.h"
#include<util/delay.h>


void H_PB_void_init(const PB_t *ptr)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <H_PB_void_init+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinDir(ptr->PB_port, ptr->PB_pin,IN);
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	81 81       	ldd	r24, Z+1	; 0x01
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	92 81       	ldd	r25, Z+2	; 0x02
    2742:	69 2f       	mov	r22, r25
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <H_PB_void_read>:
void H_PB_void_read(const PB_t *ptr,VALUE_T *pvalue)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	a1 97       	sbiw	r28, 0x21	; 33
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	9f 8f       	std	Y+31, r25	; 0x1f
    276a:	8e 8f       	std	Y+30, r24	; 0x1e
    276c:	79 a3       	std	Y+33, r23	; 0x21
    276e:	68 a3       	std	Y+32, r22	; 0x20
	//u8 read;

	if(ptr -> PB_activeMood == ACTIVE_LOW)
    2770:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2772:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2774:	83 81       	ldd	r24, Z+3	; 0x03
    2776:	88 23       	and	r24, r24
    2778:	09 f0       	breq	.+2      	; 0x277c <H_PB_void_read+0x28>
    277a:	b0 c0       	rjmp	.+352    	; 0x28dc <H_PB_void_read+0x188>
	{
		*pvalue=NOT_PRESSED_ACTIVE_LOW ;
    277c:	e8 a1       	ldd	r30, Y+32	; 0x20
    277e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 83       	st	Z, r24
		M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    2784:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2786:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2788:	81 81       	ldd	r24, Z+1	; 0x01
    278a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    278c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    278e:	92 81       	ldd	r25, Z+2	; 0x02
    2790:	28 a1       	ldd	r18, Y+32	; 0x20
    2792:	39 a1       	ldd	r19, Y+33	; 0x21
    2794:	69 2f       	mov	r22, r25
    2796:	a9 01       	movw	r20, r18
    2798:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
		if(*pvalue==PRESSED_ACTIVE_LOW){
    279c:	e8 a1       	ldd	r30, Y+32	; 0x20
    279e:	f9 a1       	ldd	r31, Y+33	; 0x21
    27a0:	80 81       	ld	r24, Z
    27a2:	88 23       	and	r24, r24
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <H_PB_void_read+0x54>
    27a6:	4f c1       	rjmp	.+670    	; 0x2a46 <H_PB_void_read+0x2f2>
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	a8 e4       	ldi	r26, 0x48	; 72
    27ae:	b3 e4       	ldi	r27, 0x43	; 67
    27b0:	89 8f       	std	Y+25, r24	; 0x19
    27b2:	9a 8f       	std	Y+26, r25	; 0x1a
    27b4:	ab 8f       	std	Y+27, r26	; 0x1b
    27b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	48 ec       	ldi	r20, 0xC8	; 200
    27c6:	53 e4       	ldi	r21, 0x43	; 67
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8d 8b       	std	Y+21, r24	; 0x15
    27d2:	9e 8b       	std	Y+22, r25	; 0x16
    27d4:	af 8b       	std	Y+23, r26	; 0x17
    27d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27d8:	6d 89       	ldd	r22, Y+21	; 0x15
    27da:	7e 89       	ldd	r23, Y+22	; 0x16
    27dc:	8f 89       	ldd	r24, Y+23	; 0x17
    27de:	98 8d       	ldd	r25, Y+24	; 0x18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	2c f4       	brge	.+10     	; 0x27fa <H_PB_void_read+0xa6>
		__ticks = 1;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
    27f8:	3f c0       	rjmp	.+126    	; 0x2878 <H_PB_void_read+0x124>
	else if (__tmp > 65535)
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	3f ef       	ldi	r19, 0xFF	; 255
    2806:	4f e7       	ldi	r20, 0x7F	; 127
    2808:	57 e4       	ldi	r21, 0x47	; 71
    280a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280e:	18 16       	cp	r1, r24
    2810:	4c f5       	brge	.+82     	; 0x2864 <H_PB_void_read+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	69 8d       	ldd	r22, Y+25	; 0x19
    2814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	0f c0       	rjmp	.+30     	; 0x285a <H_PB_void_read+0x106>
    283c:	88 e2       	ldi	r24, 0x28	; 40
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9a 8b       	std	Y+18, r25	; 0x12
    2842:	89 8b       	std	Y+17, r24	; 0x11
    2844:	89 89       	ldd	r24, Y+17	; 0x11
    2846:	9a 89       	ldd	r25, Y+18	; 0x12
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <H_PB_void_read+0xf4>
    284c:	9a 8b       	std	Y+18, r25	; 0x12
    284e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	8b 89       	ldd	r24, Y+19	; 0x13
    2852:	9c 89       	ldd	r25, Y+20	; 0x14
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	9c 8b       	std	Y+20, r25	; 0x14
    2858:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285a:	8b 89       	ldd	r24, Y+19	; 0x13
    285c:	9c 89       	ldd	r25, Y+20	; 0x14
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	69 f7       	brne	.-38     	; 0x283c <H_PB_void_read+0xe8>
    2862:	14 c0       	rjmp	.+40     	; 0x288c <H_PB_void_read+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	6d 89       	ldd	r22, Y+21	; 0x15
    2866:	7e 89       	ldd	r23, Y+22	; 0x16
    2868:	8f 89       	ldd	r24, Y+23	; 0x17
    286a:	98 8d       	ldd	r25, Y+24	; 0x18
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9c 8b       	std	Y+20, r25	; 0x14
    2876:	8b 8b       	std	Y+19, r24	; 0x13
    2878:	8b 89       	ldd	r24, Y+19	; 0x13
    287a:	9c 89       	ldd	r25, Y+20	; 0x14
    287c:	98 8b       	std	Y+16, r25	; 0x10
    287e:	8f 87       	std	Y+15, r24	; 0x0f
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <H_PB_void_read+0x130>
    2888:	98 8b       	std	Y+16, r25	; 0x10
    288a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
    288c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    288e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2890:	81 81       	ldd	r24, Z+1	; 0x01
    2892:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2894:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2896:	92 81       	ldd	r25, Z+2	; 0x02
    2898:	28 a1       	ldd	r18, Y+32	; 0x20
    289a:	39 a1       	ldd	r19, Y+33	; 0x21
    289c:	69 2f       	mov	r22, r25
    289e:	a9 01       	movw	r20, r18
    28a0:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
			if (*pvalue==PRESSED_ACTIVE_LOW)
    28a4:	e8 a1       	ldd	r30, Y+32	; 0x20
    28a6:	f9 a1       	ldd	r31, Y+33	; 0x21
    28a8:	80 81       	ld	r24, Z
    28aa:	88 23       	and	r24, r24
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <H_PB_void_read+0x15c>
    28ae:	cb c0       	rjmp	.+406    	; 0x2a46 <H_PB_void_read+0x2f2>
    28b0:	0c c0       	rjmp	.+24     	; 0x28ca <H_PB_void_read+0x176>
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
    28b2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    28b4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    28b6:	81 81       	ldd	r24, Z+1	; 0x01
    28b8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    28ba:	ff 8d       	ldd	r31, Y+31	; 0x1f
    28bc:	92 81       	ldd	r25, Z+2	; 0x02
    28be:	28 a1       	ldd	r18, Y+32	; 0x20
    28c0:	39 a1       	ldd	r19, Y+33	; 0x21
    28c2:	69 2f       	mov	r22, r25
    28c4:	a9 01       	movw	r20, r18
    28c6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
			_delay_ms(200);

			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin,pvalue);
			if (*pvalue==PRESSED_ACTIVE_LOW)
			{
				while(*pvalue==PRESSED_ACTIVE_LOW)
    28ca:	e8 a1       	ldd	r30, Y+32	; 0x20
    28cc:	f9 a1       	ldd	r31, Y+33	; 0x21
    28ce:	80 81       	ld	r24, Z
    28d0:	88 23       	and	r24, r24
    28d2:	79 f3       	breq	.-34     	; 0x28b2 <H_PB_void_read+0x15e>
				{
					M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, pvalue);
				}
				*pvalue=PRESSED_ACTIVE_LOW;
    28d4:	e8 a1       	ldd	r30, Y+32	; 0x20
    28d6:	f9 a1       	ldd	r31, Y+33	; 0x21
    28d8:	10 82       	st	Z, r1
    28da:	b5 c0       	rjmp	.+362    	; 0x2a46 <H_PB_void_read+0x2f2>
				return;
			}

		}
	}
	else if(ptr->PB_activeMood==ACTIVE_HIGH)
    28dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    28de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    28e0:	83 81       	ldd	r24, Z+3	; 0x03
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <H_PB_void_read+0x194>
    28e6:	af c0       	rjmp	.+350    	; 0x2a46 <H_PB_void_read+0x2f2>
	{
		u8 read;

		if(ptr->PB_activeMood==ACTIVE_LOW)
    28e8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    28ea:	ff 8d       	ldd	r31, Y+31	; 0x1f
    28ec:	83 81       	ldd	r24, Z+3	; 0x03
    28ee:	88 23       	and	r24, r24
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <H_PB_void_read+0x1a0>
    28f2:	a9 c0       	rjmp	.+338    	; 0x2a46 <H_PB_void_read+0x2f2>
		{
			read=NOT_PRESSED_ACTIVEHIGH ;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	8d 8f       	std	Y+29, r24	; 0x1d
			M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    28f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    28fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    28fc:	81 81       	ldd	r24, Z+1	; 0x01
    28fe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2900:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2902:	92 81       	ldd	r25, Z+2	; 0x02
    2904:	9e 01       	movw	r18, r28
    2906:	20 5e       	subi	r18, 0xE0	; 224
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	69 2f       	mov	r22, r25
    290c:	a9 01       	movw	r20, r18
    290e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
			if(read==PRESSED_ACTIVE_LOW){
    2912:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2914:	88 23       	and	r24, r24
    2916:	09 f0       	breq	.+2      	; 0x291a <H_PB_void_read+0x1c6>
    2918:	96 c0       	rjmp	.+300    	; 0x2a46 <H_PB_void_read+0x2f2>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a8 e4       	ldi	r26, 0x48	; 72
    2920:	b3 e4       	ldi	r27, 0x43	; 67
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	ad 87       	std	Y+13, r26	; 0x0d
    2928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	48 ec       	ldi	r20, 0xC8	; 200
    2938:	53 e4       	ldi	r21, 0x43	; 67
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	a9 87       	std	Y+9, r26	; 0x09
    2948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <H_PB_void_read+0x218>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <H_PB_void_read+0x296>
	else if (__tmp > 65535)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <H_PB_void_read+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <H_PB_void_read+0x278>
    29ae:	88 e2       	ldi	r24, 0x28	; 40
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <H_PB_void_read+0x266>
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <H_PB_void_read+0x25a>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <H_PB_void_read+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <H_PB_void_read+0x2a2>
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    29fe:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a00:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a02:	81 81       	ldd	r24, Z+1	; 0x01
    2a04:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a06:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a08:	92 81       	ldd	r25, Z+2	; 0x02
    2a0a:	9e 01       	movw	r18, r28
    2a0c:	20 5e       	subi	r18, 0xE0	; 224
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	69 2f       	mov	r22, r25
    2a12:	a9 01       	movw	r20, r18
    2a14:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
				if (read==PRESSED_ACTIVE_LOW)
    2a18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a1a:	88 23       	and	r24, r24
    2a1c:	a1 f4       	brne	.+40     	; 0x2a46 <H_PB_void_read+0x2f2>
    2a1e:	0d c0       	rjmp	.+26     	; 0x2a3a <H_PB_void_read+0x2e6>
				{
					while(read==PRESSED_ACTIVE_LOW)
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
    2a20:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a22:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a24:	81 81       	ldd	r24, Z+1	; 0x01
    2a26:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2a28:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2a2a:	92 81       	ldd	r25, Z+2	; 0x02
    2a2c:	9e 01       	movw	r18, r28
    2a2e:	20 5e       	subi	r18, 0xE0	; 224
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	69 2f       	mov	r22, r25
    2a34:	a9 01       	movw	r20, r18
    2a36:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
				_delay_ms(200);

				M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
				if (read==PRESSED_ACTIVE_LOW)
				{
					while(read==PRESSED_ACTIVE_LOW)
    2a3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3c:	88 23       	and	r24, r24
    2a3e:	81 f3       	breq	.-32     	; 0x2a20 <H_PB_void_read+0x2cc>
					{
						M_DIO_void_getPinValue(ptr->PB_port, ptr->PB_pin, &pvalue);
					}
					*pvalue=PRESSED_ACTIVE_LOW;
    2a40:	e8 a1       	ldd	r30, Y+32	; 0x20
    2a42:	f9 a1       	ldd	r31, Y+33	; 0x21
    2a44:	10 82       	st	Z, r1
				}

			}
		}
	}
}
    2a46:	a1 96       	adiw	r28, 0x21	; 33
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <H_Led_void_ledInit+0x6>
    2a5e:	0f 92       	push	r0
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	3b 83       	std	Y+3, r19	; 0x03
    2a6e:	2a 83       	std	Y+2, r18	; 0x02
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	9b 81       	ldd	r25, Y+3	; 0x03
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	91 05       	cpc	r25, r1
    2a78:	79 f0       	breq	.+30     	; 0x2a98 <H_Led_void_ledInit+0x40>
    2a7a:	2a 81       	ldd	r18, Y+2	; 0x02
    2a7c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a7e:	22 30       	cpi	r18, 0x02	; 2
    2a80:	31 05       	cpc	r19, r1
    2a82:	81 f0       	breq	.+32     	; 0x2aa4 <H_Led_void_ledInit+0x4c>
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	89 f4       	brne	.+34     	; 0x2aae <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	62 e0       	ldi	r22, 0x02	; 2
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2aa4:	82 e0       	ldi	r24, 0x02	; 2
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	41 e0       	ldi	r20, 0x01	; 1
    2aaa:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
			break;
	}
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <H_Led_void_setON+0x6>
    2ac0:	0f 92       	push	r0
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	3b 83       	std	Y+3, r19	; 0x03
    2ad0:	2a 83       	std	Y+2, r18	; 0x02
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	91 05       	cpc	r25, r1
    2ada:	79 f0       	breq	.+30     	; 0x2afa <H_Led_void_setON+0x40>
    2adc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ade:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae0:	22 30       	cpi	r18, 0x02	; 2
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	81 f0       	breq	.+32     	; 0x2b06 <H_Led_void_setON+0x4c>
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	89 f4       	brne	.+34     	; 0x2b10 <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2af8:	0b c0       	rjmp	.+22     	; 0x2b10 <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	62 e0       	ldi	r22, 0x02	; 2
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
			break;



	}
}
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <H_Led_void_setOFF+0x6>
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3b 83       	std	Y+3, r19	; 0x03
    2b32:	2a 83       	std	Y+2, r18	; 0x02
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	9b 81       	ldd	r25, Y+3	; 0x03
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	79 f0       	breq	.+30     	; 0x2b5c <H_Led_void_setOFF+0x40>
    2b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b40:	3b 81       	ldd	r19, Y+3	; 0x03
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	81 f0       	breq	.+32     	; 0x2b68 <H_Led_void_setOFF+0x4c>
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	89 f4       	brne	.+34     	; 0x2b72 <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2b5a:	0b c0       	rjmp	.+22     	; 0x2b72 <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	62 e0       	ldi	r22, 0x02	; 2
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    2b66:	05 c0       	rjmp	.+10     	; 0x2b72 <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	61 e0       	ldi	r22, 0x01	; 1
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <H_Led_void_toggle+0x6>
    2b84:	0f 92       	push	r0
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	3b 83       	std	Y+3, r19	; 0x03
    2b94:	2a 83       	std	Y+2, r18	; 0x02
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	71 f0       	breq	.+28     	; 0x2bbc <H_Led_void_toggle+0x3e>
    2ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba4:	22 30       	cpi	r18, 0x02	; 2
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	71 f0       	breq	.+28     	; 0x2bc6 <H_Led_void_toggle+0x48>
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	71 f4       	brne	.+28     	; 0x2bce <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <M_DIO_void_TogPinValue>
    2bba:	09 c0       	rjmp	.+18     	; 0x2bce <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <M_DIO_void_TogPinValue>
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	61 e0       	ldi	r22, 0x01	; 1
    2bca:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <M_DIO_void_TogPinValue>

				break;
		}
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <Animation1>:

void Animation1()
{
    2bda:	0f 93       	push	r16
    2bdc:	1f 93       	push	r17
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	c4 55       	subi	r28, 0x54	; 84
    2be8:	d0 40       	sbci	r29, 0x00	; 0
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    2c00:	fe 01       	movw	r30, r28
    2c02:	ef 5a       	subi	r30, 0xAF	; 175
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	aa ef       	ldi	r26, 0xFA	; 250
    2c0c:	b3 e4       	ldi	r27, 0x43	; 67
    2c0e:	80 83       	st	Z, r24
    2c10:	91 83       	std	Z+1, r25	; 0x01
    2c12:	a2 83       	std	Z+2, r26	; 0x02
    2c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	8e 01       	movw	r16, r28
    2c18:	03 5b       	subi	r16, 0xB3	; 179
    2c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ef 5a       	subi	r30, 0xAF	; 175
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	48 ec       	ldi	r20, 0xC8	; 200
    2c30:	53 e4       	ldi	r21, 0x43	; 67
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	80 83       	st	Z, r24
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	a2 83       	std	Z+2, r26	; 0x02
    2c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c44:	fe 01       	movw	r30, r28
    2c46:	e3 5b       	subi	r30, 0xB3	; 179
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	60 81       	ld	r22, Z
    2c4c:	71 81       	ldd	r23, Z+1	; 0x01
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	93 81       	ldd	r25, Z+3	; 0x03
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	44 f4       	brge	.+16     	; 0x2c72 <Animation1+0x98>
		__ticks = 1;
    2c62:	fe 01       	movw	r30, r28
    2c64:	e5 5b       	subi	r30, 0xB5	; 181
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	80 83       	st	Z, r24
    2c70:	64 c0       	rjmp	.+200    	; 0x2d3a <Animation1+0x160>
	else if (__tmp > 65535)
    2c72:	fe 01       	movw	r30, r28
    2c74:	e3 5b       	subi	r30, 0xB3	; 179
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	0c f0       	brlt	.+2      	; 0x2c92 <Animation1+0xb8>
    2c90:	43 c0       	rjmp	.+134    	; 0x2d18 <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	fe 01       	movw	r30, r28
    2c94:	ef 5a       	subi	r30, 0xAF	; 175
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8e 01       	movw	r16, r28
    2cb2:	05 5b       	subi	r16, 0xB5	; 181
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	1f c0       	rjmp	.+62     	; 0x2d08 <Animation1+0x12e>
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e7 5b       	subi	r30, 0xB7	; 183
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	88 e2       	ldi	r24, 0x28	; 40
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	80 83       	st	Z, r24
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e7 5b       	subi	r30, 0xB7	; 183
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	91 81       	ldd	r25, Z+1	; 0x01
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <Animation1+0x108>
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 5b       	subi	r30, 0xB7	; 183
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf0:	de 01       	movw	r26, r28
    2cf2:	a5 5b       	subi	r26, 0xB5	; 181
    2cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e5 5b       	subi	r30, 0xB5	; 181
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	11 96       	adiw	r26, 0x01	; 1
    2d04:	9c 93       	st	X, r25
    2d06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e5 5b       	subi	r30, 0xB5	; 181
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	d1 f6       	brne	.-76     	; 0x2cca <Animation1+0xf0>
    2d16:	27 c0       	rjmp	.+78     	; 0x2d66 <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d18:	8e 01       	movw	r16, r28
    2d1a:	05 5b       	subi	r16, 0xB5	; 181
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e3 5b       	subi	r30, 0xB3	; 179
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	f8 01       	movw	r30, r16
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	80 83       	st	Z, r24
    2d3a:	de 01       	movw	r26, r28
    2d3c:	a9 5b       	subi	r26, 0xB9	; 185
    2d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 5b       	subi	r30, 0xB5	; 181
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	8d 93       	st	X+, r24
    2d4c:	9c 93       	st	X, r25
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e9 5b       	subi	r30, 0xB9	; 185
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <Animation1+0x17e>
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e9 5b       	subi	r30, 0xB9	; 185
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ed 5b       	subi	r30, 0xBD	; 189
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	aa ef       	ldi	r26, 0xFA	; 250
    2d7e:	b3 e4       	ldi	r27, 0x43	; 67
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	a2 83       	std	Z+2, r26	; 0x02
    2d86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	8e 01       	movw	r16, r28
    2d8a:	01 5c       	subi	r16, 0xC1	; 193
    2d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ed 5b       	subi	r30, 0xBD	; 189
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	48 ec       	ldi	r20, 0xC8	; 200
    2da2:	53 e4       	ldi	r21, 0x43	; 67
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 83       	st	Z, r24
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	a2 83       	std	Z+2, r26	; 0x02
    2db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db6:	fe 01       	movw	r30, r28
    2db8:	ff 96       	adiw	r30, 0x3f	; 63
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e8       	ldi	r20, 0x80	; 128
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <Animation1+0x202>
		__ticks = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9e af       	std	Y+62, r25	; 0x3e
    2dd8:	8d af       	std	Y+61, r24	; 0x3d
    2dda:	46 c0       	rjmp	.+140    	; 0x2e68 <Animation1+0x28e>
	else if (__tmp > 65535)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ff 96       	adiw	r30, 0x3f	; 63
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	64 f5       	brge	.+88     	; 0x2e50 <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ed 5b       	subi	r30, 0xBD	; 189
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e af       	std	Y+62, r25	; 0x3e
    2e24:	8d af       	std	Y+61, r24	; 0x3d
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <Animation1+0x26c>
    2e28:	88 e2       	ldi	r24, 0x28	; 40
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9c af       	std	Y+60, r25	; 0x3c
    2e2e:	8b af       	std	Y+59, r24	; 0x3b
    2e30:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e32:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <Animation1+0x25a>
    2e38:	9c af       	std	Y+60, r25	; 0x3c
    2e3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	9e af       	std	Y+62, r25	; 0x3e
    2e44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <Animation1+0x24e>
    2e4e:	16 c0       	rjmp	.+44     	; 0x2e7c <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	fe 01       	movw	r30, r28
    2e52:	ff 96       	adiw	r30, 0x3f	; 63
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9e af       	std	Y+62, r25	; 0x3e
    2e66:	8d af       	std	Y+61, r24	; 0x3d
    2e68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e6c:	9a af       	std	Y+58, r25	; 0x3a
    2e6e:	89 af       	std	Y+57, r24	; 0x39
    2e70:	89 ad       	ldd	r24, Y+57	; 0x39
    2e72:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <Animation1+0x29a>
    2e78:	9a af       	std	Y+58, r25	; 0x3a
    2e7a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	aa ef       	ldi	r26, 0xFA	; 250
    2e8e:	b3 e4       	ldi	r27, 0x43	; 67
    2e90:	8d ab       	std	Y+53, r24	; 0x35
    2e92:	9e ab       	std	Y+54, r25	; 0x36
    2e94:	af ab       	std	Y+55, r26	; 0x37
    2e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6d a9       	ldd	r22, Y+53	; 0x35
    2e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	48 ec       	ldi	r20, 0xC8	; 200
    2ea6:	53 e4       	ldi	r21, 0x43	; 67
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	89 ab       	std	Y+49, r24	; 0x31
    2eb2:	9a ab       	std	Y+50, r25	; 0x32
    2eb4:	ab ab       	std	Y+51, r26	; 0x33
    2eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eba:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <Animation1+0x300>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	98 ab       	std	Y+48, r25	; 0x30
    2ed6:	8f a7       	std	Y+47, r24	; 0x2f
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <Animation1+0x37e>
	else if (__tmp > 65535)
    2eda:	69 a9       	ldd	r22, Y+49	; 0x31
    2edc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ede:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	98 ab       	std	Y+48, r25	; 0x30
    2f18:	8f a7       	std	Y+47, r24	; 0x2f
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <Animation1+0x360>
    2f1c:	88 e2       	ldi	r24, 0x28	; 40
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e a7       	std	Y+46, r25	; 0x2e
    2f22:	8d a7       	std	Y+45, r24	; 0x2d
    2f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <Animation1+0x34e>
    2f2c:	9e a7       	std	Y+46, r25	; 0x2e
    2f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f32:	98 a9       	ldd	r25, Y+48	; 0x30
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <Animation1+0x342>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	69 a9       	ldd	r22, Y+49	; 0x31
    2f46:	7a a9       	ldd	r23, Y+50	; 0x32
    2f48:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	98 ab       	std	Y+48, r25	; 0x30
    2f56:	8f a7       	std	Y+47, r24	; 0x2f
    2f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f5c:	9c a7       	std	Y+44, r25	; 0x2c
    2f5e:	8b a7       	std	Y+43, r24	; 0x2b
    2f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <Animation1+0x38a>
    2f68:	9c a7       	std	Y+44, r25	; 0x2c
    2f6a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	aa ef       	ldi	r26, 0xFA	; 250
    2f7e:	b3 e4       	ldi	r27, 0x43	; 67
    2f80:	8f a3       	std	Y+39, r24	; 0x27
    2f82:	98 a7       	std	Y+40, r25	; 0x28
    2f84:	a9 a7       	std	Y+41, r26	; 0x29
    2f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f88:	6f a1       	ldd	r22, Y+39	; 0x27
    2f8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	48 ec       	ldi	r20, 0xC8	; 200
    2f96:	53 e4       	ldi	r21, 0x43	; 67
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	8b a3       	std	Y+35, r24	; 0x23
    2fa2:	9c a3       	std	Y+36, r25	; 0x24
    2fa4:	ad a3       	std	Y+37, r26	; 0x25
    2fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2faa:	7c a1       	ldd	r23, Y+36	; 0x24
    2fac:	8d a1       	ldd	r24, Y+37	; 0x25
    2fae:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e8       	ldi	r20, 0x80	; 128
    2fb6:	5f e3       	ldi	r21, 0x3F	; 63
    2fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fbc:	88 23       	and	r24, r24
    2fbe:	2c f4       	brge	.+10     	; 0x2fca <Animation1+0x3f0>
		__ticks = 1;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9a a3       	std	Y+34, r25	; 0x22
    2fc6:	89 a3       	std	Y+33, r24	; 0x21
    2fc8:	3f c0       	rjmp	.+126    	; 0x3048 <Animation1+0x46e>
	else if (__tmp > 65535)
    2fca:	6b a1       	ldd	r22, Y+35	; 0x23
    2fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2fce:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	3f ef       	ldi	r19, 0xFF	; 255
    2fd6:	4f e7       	ldi	r20, 0x7F	; 127
    2fd8:	57 e4       	ldi	r21, 0x47	; 71
    2fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fde:	18 16       	cp	r1, r24
    2fe0:	4c f5       	brge	.+82     	; 0x3034 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e2       	ldi	r20, 0x20	; 32
    2ff0:	51 e4       	ldi	r21, 0x41	; 65
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9a a3       	std	Y+34, r25	; 0x22
    3008:	89 a3       	std	Y+33, r24	; 0x21
    300a:	0f c0       	rjmp	.+30     	; 0x302a <Animation1+0x450>
    300c:	88 e2       	ldi	r24, 0x28	; 40
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	98 a3       	std	Y+32, r25	; 0x20
    3012:	8f 8f       	std	Y+31, r24	; 0x1f
    3014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3016:	98 a1       	ldd	r25, Y+32	; 0x20
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <Animation1+0x43e>
    301c:	98 a3       	std	Y+32, r25	; 0x20
    301e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3020:	89 a1       	ldd	r24, Y+33	; 0x21
    3022:	9a a1       	ldd	r25, Y+34	; 0x22
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	9a a3       	std	Y+34, r25	; 0x22
    3028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302a:	89 a1       	ldd	r24, Y+33	; 0x21
    302c:	9a a1       	ldd	r25, Y+34	; 0x22
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	69 f7       	brne	.-38     	; 0x300c <Animation1+0x432>
    3032:	14 c0       	rjmp	.+40     	; 0x305c <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3034:	6b a1       	ldd	r22, Y+35	; 0x23
    3036:	7c a1       	ldd	r23, Y+36	; 0x24
    3038:	8d a1       	ldd	r24, Y+37	; 0x25
    303a:	9e a1       	ldd	r25, Y+38	; 0x26
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	9a a3       	std	Y+34, r25	; 0x22
    3046:	89 a3       	std	Y+33, r24	; 0x21
    3048:	89 a1       	ldd	r24, Y+33	; 0x21
    304a:	9a a1       	ldd	r25, Y+34	; 0x22
    304c:	9e 8f       	std	Y+30, r25	; 0x1e
    304e:	8d 8f       	std	Y+29, r24	; 0x1d
    3050:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3052:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <Animation1+0x47a>
    3058:	9e 8f       	std	Y+30, r25	; 0x1e
    305a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	aa ef       	ldi	r26, 0xFA	; 250
    306e:	b3 e4       	ldi	r27, 0x43	; 67
    3070:	89 8f       	std	Y+25, r24	; 0x19
    3072:	9a 8f       	std	Y+26, r25	; 0x1a
    3074:	ab 8f       	std	Y+27, r26	; 0x1b
    3076:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	69 8d       	ldd	r22, Y+25	; 0x19
    307a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	48 ec       	ldi	r20, 0xC8	; 200
    3086:	53 e4       	ldi	r21, 0x43	; 67
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	8d 8b       	std	Y+21, r24	; 0x15
    3092:	9e 8b       	std	Y+22, r25	; 0x16
    3094:	af 8b       	std	Y+23, r26	; 0x17
    3096:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <Animation1+0x4e0>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <Animation1+0x55e>
	else if (__tmp > 65535)
    30ba:	6d 89       	ldd	r22, Y+21	; 0x15
    30bc:	7e 89       	ldd	r23, Y+22	; 0x16
    30be:	8f 89       	ldd	r24, Y+23	; 0x17
    30c0:	98 8d       	ldd	r25, Y+24	; 0x18
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	69 8d       	ldd	r22, Y+25	; 0x19
    30d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9c 8b       	std	Y+20, r25	; 0x14
    30f8:	8b 8b       	std	Y+19, r24	; 0x13
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <Animation1+0x540>
    30fc:	88 e2       	ldi	r24, 0x28	; 40
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9a 8b       	std	Y+18, r25	; 0x12
    3102:	89 8b       	std	Y+17, r24	; 0x11
    3104:	89 89       	ldd	r24, Y+17	; 0x11
    3106:	9a 89       	ldd	r25, Y+18	; 0x12
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <Animation1+0x52e>
    310c:	9a 8b       	std	Y+18, r25	; 0x12
    310e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8b 89       	ldd	r24, Y+19	; 0x13
    3112:	9c 89       	ldd	r25, Y+20	; 0x14
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	9c 8b       	std	Y+20, r25	; 0x14
    3118:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8b 89       	ldd	r24, Y+19	; 0x13
    311c:	9c 89       	ldd	r25, Y+20	; 0x14
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <Animation1+0x522>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	6d 89       	ldd	r22, Y+21	; 0x15
    3126:	7e 89       	ldd	r23, Y+22	; 0x16
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	8b 89       	ldd	r24, Y+19	; 0x13
    313a:	9c 89       	ldd	r25, Y+20	; 0x14
    313c:	98 8b       	std	Y+16, r25	; 0x10
    313e:	8f 87       	std	Y+15, r24	; 0x0f
    3140:	8f 85       	ldd	r24, Y+15	; 0x0f
    3142:	98 89       	ldd	r25, Y+16	; 0x10
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <Animation1+0x56a>
    3148:	98 8b       	std	Y+16, r25	; 0x10
    314a:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	aa ef       	ldi	r26, 0xFA	; 250
    315e:	b3 e4       	ldi	r27, 0x43	; 67
    3160:	8b 87       	std	Y+11, r24	; 0x0b
    3162:	9c 87       	std	Y+12, r25	; 0x0c
    3164:	ad 87       	std	Y+13, r26	; 0x0d
    3166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	48 ec       	ldi	r20, 0xC8	; 200
    3176:	53 e4       	ldi	r21, 0x43	; 67
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8f 83       	std	Y+7, r24	; 0x07
    3182:	98 87       	std	Y+8, r25	; 0x08
    3184:	a9 87       	std	Y+9, r26	; 0x09
    3186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <Animation1+0x5d0>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <Animation1+0x64e>
	else if (__tmp > 65535)
    31aa:	6f 81       	ldd	r22, Y+7	; 0x07
    31ac:	78 85       	ldd	r23, Y+8	; 0x08
    31ae:	89 85       	ldd	r24, Y+9	; 0x09
    31b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <Animation1+0x630>
    31ec:	88 e2       	ldi	r24, 0x28	; 40
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <Animation1+0x61e>
    31fc:	9c 83       	std	Y+4, r25	; 0x04
    31fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <Animation1+0x612>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	9a 81       	ldd	r25, Y+2	; 0x02
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <Animation1+0x65a>
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    323c:	cc 5a       	subi	r28, 0xAC	; 172
    323e:	df 4f       	sbci	r29, 0xFF	; 255
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	08 95       	ret

00003254 <Animation2>:
void Animation2()
{
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	c4 55       	subi	r28, 0x54	; 84
    3262:	d0 40       	sbci	r29, 0x00	; 0
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    3274:	fe 01       	movw	r30, r28
    3276:	ef 5a       	subi	r30, 0xAF	; 175
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	aa ef       	ldi	r26, 0xFA	; 250
    3280:	b3 e4       	ldi	r27, 0x43	; 67
    3282:	80 83       	st	Z, r24
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	a2 83       	std	Z+2, r26	; 0x02
    3288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328a:	8e 01       	movw	r16, r28
    328c:	03 5b       	subi	r16, 0xB3	; 179
    328e:	1f 4f       	sbci	r17, 0xFF	; 255
    3290:	fe 01       	movw	r30, r28
    3292:	ef 5a       	subi	r30, 0xAF	; 175
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	48 ec       	ldi	r20, 0xC8	; 200
    32a4:	53 e4       	ldi	r21, 0x43	; 67
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	f8 01       	movw	r30, r16
    32b0:	80 83       	st	Z, r24
    32b2:	91 83       	std	Z+1, r25	; 0x01
    32b4:	a2 83       	std	Z+2, r26	; 0x02
    32b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32b8:	fe 01       	movw	r30, r28
    32ba:	e3 5b       	subi	r30, 0xB3	; 179
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	60 81       	ld	r22, Z
    32c0:	71 81       	ldd	r23, Z+1	; 0x01
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	93 81       	ldd	r25, Z+3	; 0x03
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e8       	ldi	r20, 0x80	; 128
    32cc:	5f e3       	ldi	r21, 0x3F	; 63
    32ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d2:	88 23       	and	r24, r24
    32d4:	44 f4       	brge	.+16     	; 0x32e6 <Animation2+0x92>
		__ticks = 1;
    32d6:	fe 01       	movw	r30, r28
    32d8:	e5 5b       	subi	r30, 0xB5	; 181
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	64 c0       	rjmp	.+200    	; 0x33ae <Animation2+0x15a>
	else if (__tmp > 65535)
    32e6:	fe 01       	movw	r30, r28
    32e8:	e3 5b       	subi	r30, 0xB3	; 179
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	3f ef       	ldi	r19, 0xFF	; 255
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	57 e4       	ldi	r21, 0x47	; 71
    32fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	0c f0       	brlt	.+2      	; 0x3306 <Animation2+0xb2>
    3304:	43 c0       	rjmp	.+134    	; 0x338c <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	fe 01       	movw	r30, r28
    3308:	ef 5a       	subi	r30, 0xAF	; 175
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	60 81       	ld	r22, Z
    330e:	71 81       	ldd	r23, Z+1	; 0x01
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e2       	ldi	r20, 0x20	; 32
    331a:	51 e4       	ldi	r21, 0x41	; 65
    331c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	8e 01       	movw	r16, r28
    3326:	05 5b       	subi	r16, 0xB5	; 181
    3328:	1f 4f       	sbci	r17, 0xFF	; 255
    332a:	bc 01       	movw	r22, r24
    332c:	cd 01       	movw	r24, r26
    332e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	f8 01       	movw	r30, r16
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
    333c:	1f c0       	rjmp	.+62     	; 0x337c <Animation2+0x128>
    333e:	fe 01       	movw	r30, r28
    3340:	e7 5b       	subi	r30, 0xB7	; 183
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	88 e2       	ldi	r24, 0x28	; 40
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
    334c:	fe 01       	movw	r30, r28
    334e:	e7 5b       	subi	r30, 0xB7	; 183
    3350:	ff 4f       	sbci	r31, 0xFF	; 255
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	01 97       	sbiw	r24, 0x01	; 1
    3358:	f1 f7       	brne	.-4      	; 0x3356 <Animation2+0x102>
    335a:	fe 01       	movw	r30, r28
    335c:	e7 5b       	subi	r30, 0xB7	; 183
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3364:	de 01       	movw	r26, r28
    3366:	a5 5b       	subi	r26, 0xB5	; 181
    3368:	bf 4f       	sbci	r27, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5b       	subi	r30, 0xB5	; 181
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	11 96       	adiw	r26, 0x01	; 1
    3378:	9c 93       	st	X, r25
    337a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337c:	fe 01       	movw	r30, r28
    337e:	e5 5b       	subi	r30, 0xB5	; 181
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	00 97       	sbiw	r24, 0x00	; 0
    3388:	d1 f6       	brne	.-76     	; 0x333e <Animation2+0xea>
    338a:	27 c0       	rjmp	.+78     	; 0x33da <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338c:	8e 01       	movw	r16, r28
    338e:	05 5b       	subi	r16, 0xB5	; 181
    3390:	1f 4f       	sbci	r17, 0xFF	; 255
    3392:	fe 01       	movw	r30, r28
    3394:	e3 5b       	subi	r30, 0xB3	; 179
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	f8 01       	movw	r30, r16
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
    33ae:	de 01       	movw	r26, r28
    33b0:	a9 5b       	subi	r26, 0xB9	; 185
    33b2:	bf 4f       	sbci	r27, 0xFF	; 255
    33b4:	fe 01       	movw	r30, r28
    33b6:	e5 5b       	subi	r30, 0xB5	; 181
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	8d 93       	st	X+, r24
    33c0:	9c 93       	st	X, r25
    33c2:	fe 01       	movw	r30, r28
    33c4:	e9 5b       	subi	r30, 0xB9	; 185
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <Animation2+0x178>
    33d0:	fe 01       	movw	r30, r28
    33d2:	e9 5b       	subi	r30, 0xB9	; 185
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    33e0:	fe 01       	movw	r30, r28
    33e2:	ed 5b       	subi	r30, 0xBD	; 189
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	aa ef       	ldi	r26, 0xFA	; 250
    33ec:	b3 e4       	ldi	r27, 0x43	; 67
    33ee:	80 83       	st	Z, r24
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	a2 83       	std	Z+2, r26	; 0x02
    33f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	8e 01       	movw	r16, r28
    33f8:	01 5c       	subi	r16, 0xC1	; 193
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	fe 01       	movw	r30, r28
    33fe:	ed 5b       	subi	r30, 0xBD	; 189
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	60 81       	ld	r22, Z
    3404:	71 81       	ldd	r23, Z+1	; 0x01
    3406:	82 81       	ldd	r24, Z+2	; 0x02
    3408:	93 81       	ldd	r25, Z+3	; 0x03
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	48 ec       	ldi	r20, 0xC8	; 200
    3410:	53 e4       	ldi	r21, 0x43	; 67
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	f8 01       	movw	r30, r16
    341c:	80 83       	st	Z, r24
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	a2 83       	std	Z+2, r26	; 0x02
    3422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3424:	fe 01       	movw	r30, r28
    3426:	ff 96       	adiw	r30, 0x3f	; 63
    3428:	60 81       	ld	r22, Z
    342a:	71 81       	ldd	r23, Z+1	; 0x01
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	93 81       	ldd	r25, Z+3	; 0x03
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <Animation2+0x1f6>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9e af       	std	Y+62, r25	; 0x3e
    3446:	8d af       	std	Y+61, r24	; 0x3d
    3448:	46 c0       	rjmp	.+140    	; 0x34d6 <Animation2+0x282>
	else if (__tmp > 65535)
    344a:	fe 01       	movw	r30, r28
    344c:	ff 96       	adiw	r30, 0x3f	; 63
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	3f ef       	ldi	r19, 0xFF	; 255
    345a:	4f e7       	ldi	r20, 0x7F	; 127
    345c:	57 e4       	ldi	r21, 0x47	; 71
    345e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3462:	18 16       	cp	r1, r24
    3464:	64 f5       	brge	.+88     	; 0x34be <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	fe 01       	movw	r30, r28
    3468:	ed 5b       	subi	r30, 0xBD	; 189
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e2       	ldi	r20, 0x20	; 32
    347a:	51 e4       	ldi	r21, 0x41	; 65
    347c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9e af       	std	Y+62, r25	; 0x3e
    3492:	8d af       	std	Y+61, r24	; 0x3d
    3494:	0f c0       	rjmp	.+30     	; 0x34b4 <Animation2+0x260>
    3496:	88 e2       	ldi	r24, 0x28	; 40
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	9c af       	std	Y+60, r25	; 0x3c
    349c:	8b af       	std	Y+59, r24	; 0x3b
    349e:	8b ad       	ldd	r24, Y+59	; 0x3b
    34a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <Animation2+0x24e>
    34a6:	9c af       	std	Y+60, r25	; 0x3c
    34a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	9e af       	std	Y+62, r25	; 0x3e
    34b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    34b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	69 f7       	brne	.-38     	; 0x3496 <Animation2+0x242>
    34bc:	16 c0       	rjmp	.+44     	; 0x34ea <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34be:	fe 01       	movw	r30, r28
    34c0:	ff 96       	adiw	r30, 0x3f	; 63
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	9e af       	std	Y+62, r25	; 0x3e
    34d4:	8d af       	std	Y+61, r24	; 0x3d
    34d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    34d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    34da:	9a af       	std	Y+58, r25	; 0x3a
    34dc:	89 af       	std	Y+57, r24	; 0x39
    34de:	89 ad       	ldd	r24, Y+57	; 0x39
    34e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <Animation2+0x28e>
    34e6:	9a af       	std	Y+58, r25	; 0x3a
    34e8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	aa ef       	ldi	r26, 0xFA	; 250
    34f6:	b3 e4       	ldi	r27, 0x43	; 67
    34f8:	8d ab       	std	Y+53, r24	; 0x35
    34fa:	9e ab       	std	Y+54, r25	; 0x36
    34fc:	af ab       	std	Y+55, r26	; 0x37
    34fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3500:	6d a9       	ldd	r22, Y+53	; 0x35
    3502:	7e a9       	ldd	r23, Y+54	; 0x36
    3504:	8f a9       	ldd	r24, Y+55	; 0x37
    3506:	98 ad       	ldd	r25, Y+56	; 0x38
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	48 ec       	ldi	r20, 0xC8	; 200
    350e:	53 e4       	ldi	r21, 0x43	; 67
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	89 ab       	std	Y+49, r24	; 0x31
    351a:	9a ab       	std	Y+50, r25	; 0x32
    351c:	ab ab       	std	Y+51, r26	; 0x33
    351e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3520:	69 a9       	ldd	r22, Y+49	; 0x31
    3522:	7a a9       	ldd	r23, Y+50	; 0x32
    3524:	8b a9       	ldd	r24, Y+51	; 0x33
    3526:	9c a9       	ldd	r25, Y+52	; 0x34
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e8       	ldi	r20, 0x80	; 128
    352e:	5f e3       	ldi	r21, 0x3F	; 63
    3530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3534:	88 23       	and	r24, r24
    3536:	2c f4       	brge	.+10     	; 0x3542 <Animation2+0x2ee>
		__ticks = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	98 ab       	std	Y+48, r25	; 0x30
    353e:	8f a7       	std	Y+47, r24	; 0x2f
    3540:	3f c0       	rjmp	.+126    	; 0x35c0 <Animation2+0x36c>
	else if (__tmp > 65535)
    3542:	69 a9       	ldd	r22, Y+49	; 0x31
    3544:	7a a9       	ldd	r23, Y+50	; 0x32
    3546:	8b a9       	ldd	r24, Y+51	; 0x33
    3548:	9c a9       	ldd	r25, Y+52	; 0x34
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	3f ef       	ldi	r19, 0xFF	; 255
    354e:	4f e7       	ldi	r20, 0x7F	; 127
    3550:	57 e4       	ldi	r21, 0x47	; 71
    3552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3556:	18 16       	cp	r1, r24
    3558:	4c f5       	brge	.+82     	; 0x35ac <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355a:	6d a9       	ldd	r22, Y+53	; 0x35
    355c:	7e a9       	ldd	r23, Y+54	; 0x36
    355e:	8f a9       	ldd	r24, Y+55	; 0x37
    3560:	98 ad       	ldd	r25, Y+56	; 0x38
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e2       	ldi	r20, 0x20	; 32
    3568:	51 e4       	ldi	r21, 0x41	; 65
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	98 ab       	std	Y+48, r25	; 0x30
    3580:	8f a7       	std	Y+47, r24	; 0x2f
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <Animation2+0x34e>
    3584:	88 e2       	ldi	r24, 0x28	; 40
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	9e a7       	std	Y+46, r25	; 0x2e
    358a:	8d a7       	std	Y+45, r24	; 0x2d
    358c:	8d a5       	ldd	r24, Y+45	; 0x2d
    358e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <Animation2+0x33c>
    3594:	9e a7       	std	Y+46, r25	; 0x2e
    3596:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3598:	8f a5       	ldd	r24, Y+47	; 0x2f
    359a:	98 a9       	ldd	r25, Y+48	; 0x30
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	98 ab       	std	Y+48, r25	; 0x30
    35a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a4:	98 a9       	ldd	r25, Y+48	; 0x30
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	69 f7       	brne	.-38     	; 0x3584 <Animation2+0x330>
    35aa:	14 c0       	rjmp	.+40     	; 0x35d4 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ac:	69 a9       	ldd	r22, Y+49	; 0x31
    35ae:	7a a9       	ldd	r23, Y+50	; 0x32
    35b0:	8b a9       	ldd	r24, Y+51	; 0x33
    35b2:	9c a9       	ldd	r25, Y+52	; 0x34
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	98 ab       	std	Y+48, r25	; 0x30
    35be:	8f a7       	std	Y+47, r24	; 0x2f
    35c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c2:	98 a9       	ldd	r25, Y+48	; 0x30
    35c4:	9c a7       	std	Y+44, r25	; 0x2c
    35c6:	8b a7       	std	Y+43, r24	; 0x2b
    35c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <Animation2+0x378>
    35d0:	9c a7       	std	Y+44, r25	; 0x2c
    35d2:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	aa ef       	ldi	r26, 0xFA	; 250
    35e0:	b3 e4       	ldi	r27, 0x43	; 67
    35e2:	8f a3       	std	Y+39, r24	; 0x27
    35e4:	98 a7       	std	Y+40, r25	; 0x28
    35e6:	a9 a7       	std	Y+41, r26	; 0x29
    35e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ea:	6f a1       	ldd	r22, Y+39	; 0x27
    35ec:	78 a5       	ldd	r23, Y+40	; 0x28
    35ee:	89 a5       	ldd	r24, Y+41	; 0x29
    35f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	48 ec       	ldi	r20, 0xC8	; 200
    35f8:	53 e4       	ldi	r21, 0x43	; 67
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	8b a3       	std	Y+35, r24	; 0x23
    3604:	9c a3       	std	Y+36, r25	; 0x24
    3606:	ad a3       	std	Y+37, r26	; 0x25
    3608:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    360a:	6b a1       	ldd	r22, Y+35	; 0x23
    360c:	7c a1       	ldd	r23, Y+36	; 0x24
    360e:	8d a1       	ldd	r24, Y+37	; 0x25
    3610:	9e a1       	ldd	r25, Y+38	; 0x26
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	5f e3       	ldi	r21, 0x3F	; 63
    361a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    361e:	88 23       	and	r24, r24
    3620:	2c f4       	brge	.+10     	; 0x362c <Animation2+0x3d8>
		__ticks = 1;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	9a a3       	std	Y+34, r25	; 0x22
    3628:	89 a3       	std	Y+33, r24	; 0x21
    362a:	3f c0       	rjmp	.+126    	; 0x36aa <Animation2+0x456>
	else if (__tmp > 65535)
    362c:	6b a1       	ldd	r22, Y+35	; 0x23
    362e:	7c a1       	ldd	r23, Y+36	; 0x24
    3630:	8d a1       	ldd	r24, Y+37	; 0x25
    3632:	9e a1       	ldd	r25, Y+38	; 0x26
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f e7       	ldi	r20, 0x7F	; 127
    363a:	57 e4       	ldi	r21, 0x47	; 71
    363c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3640:	18 16       	cp	r1, r24
    3642:	4c f5       	brge	.+82     	; 0x3696 <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	6f a1       	ldd	r22, Y+39	; 0x27
    3646:	78 a5       	ldd	r23, Y+40	; 0x28
    3648:	89 a5       	ldd	r24, Y+41	; 0x29
    364a:	9a a5       	ldd	r25, Y+42	; 0x2a
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	51 e4       	ldi	r21, 0x41	; 65
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	9a a3       	std	Y+34, r25	; 0x22
    366a:	89 a3       	std	Y+33, r24	; 0x21
    366c:	0f c0       	rjmp	.+30     	; 0x368c <Animation2+0x438>
    366e:	88 e2       	ldi	r24, 0x28	; 40
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	98 a3       	std	Y+32, r25	; 0x20
    3674:	8f 8f       	std	Y+31, r24	; 0x1f
    3676:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3678:	98 a1       	ldd	r25, Y+32	; 0x20
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <Animation2+0x426>
    367e:	98 a3       	std	Y+32, r25	; 0x20
    3680:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3682:	89 a1       	ldd	r24, Y+33	; 0x21
    3684:	9a a1       	ldd	r25, Y+34	; 0x22
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	9a a3       	std	Y+34, r25	; 0x22
    368a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368c:	89 a1       	ldd	r24, Y+33	; 0x21
    368e:	9a a1       	ldd	r25, Y+34	; 0x22
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	69 f7       	brne	.-38     	; 0x366e <Animation2+0x41a>
    3694:	14 c0       	rjmp	.+40     	; 0x36be <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3696:	6b a1       	ldd	r22, Y+35	; 0x23
    3698:	7c a1       	ldd	r23, Y+36	; 0x24
    369a:	8d a1       	ldd	r24, Y+37	; 0x25
    369c:	9e a1       	ldd	r25, Y+38	; 0x26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9a a3       	std	Y+34, r25	; 0x22
    36a8:	89 a3       	std	Y+33, r24	; 0x21
    36aa:	89 a1       	ldd	r24, Y+33	; 0x21
    36ac:	9a a1       	ldd	r25, Y+34	; 0x22
    36ae:	9e 8f       	std	Y+30, r25	; 0x1e
    36b0:	8d 8f       	std	Y+29, r24	; 0x1d
    36b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <Animation2+0x462>
    36ba:	9e 8f       	std	Y+30, r25	; 0x1e
    36bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	aa ef       	ldi	r26, 0xFA	; 250
    36ca:	b3 e4       	ldi	r27, 0x43	; 67
    36cc:	89 8f       	std	Y+25, r24	; 0x19
    36ce:	9a 8f       	std	Y+26, r25	; 0x1a
    36d0:	ab 8f       	std	Y+27, r26	; 0x1b
    36d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d4:	69 8d       	ldd	r22, Y+25	; 0x19
    36d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	48 ec       	ldi	r20, 0xC8	; 200
    36e2:	53 e4       	ldi	r21, 0x43	; 67
    36e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	8d 8b       	std	Y+21, r24	; 0x15
    36ee:	9e 8b       	std	Y+22, r25	; 0x16
    36f0:	af 8b       	std	Y+23, r26	; 0x17
    36f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36f4:	6d 89       	ldd	r22, Y+21	; 0x15
    36f6:	7e 89       	ldd	r23, Y+22	; 0x16
    36f8:	8f 89       	ldd	r24, Y+23	; 0x17
    36fa:	98 8d       	ldd	r25, Y+24	; 0x18
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e8       	ldi	r20, 0x80	; 128
    3702:	5f e3       	ldi	r21, 0x3F	; 63
    3704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3708:	88 23       	and	r24, r24
    370a:	2c f4       	brge	.+10     	; 0x3716 <Animation2+0x4c2>
		__ticks = 1;
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9c 8b       	std	Y+20, r25	; 0x14
    3712:	8b 8b       	std	Y+19, r24	; 0x13
    3714:	3f c0       	rjmp	.+126    	; 0x3794 <Animation2+0x540>
	else if (__tmp > 65535)
    3716:	6d 89       	ldd	r22, Y+21	; 0x15
    3718:	7e 89       	ldd	r23, Y+22	; 0x16
    371a:	8f 89       	ldd	r24, Y+23	; 0x17
    371c:	98 8d       	ldd	r25, Y+24	; 0x18
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	3f ef       	ldi	r19, 0xFF	; 255
    3722:	4f e7       	ldi	r20, 0x7F	; 127
    3724:	57 e4       	ldi	r21, 0x47	; 71
    3726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372a:	18 16       	cp	r1, r24
    372c:	4c f5       	brge	.+82     	; 0x3780 <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372e:	69 8d       	ldd	r22, Y+25	; 0x19
    3730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e2       	ldi	r20, 0x20	; 32
    373c:	51 e4       	ldi	r21, 0x41	; 65
    373e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	9c 8b       	std	Y+20, r25	; 0x14
    3754:	8b 8b       	std	Y+19, r24	; 0x13
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <Animation2+0x522>
    3758:	88 e2       	ldi	r24, 0x28	; 40
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9a 8b       	std	Y+18, r25	; 0x12
    375e:	89 8b       	std	Y+17, r24	; 0x11
    3760:	89 89       	ldd	r24, Y+17	; 0x11
    3762:	9a 89       	ldd	r25, Y+18	; 0x12
    3764:	01 97       	sbiw	r24, 0x01	; 1
    3766:	f1 f7       	brne	.-4      	; 0x3764 <Animation2+0x510>
    3768:	9a 8b       	std	Y+18, r25	; 0x12
    376a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376c:	8b 89       	ldd	r24, Y+19	; 0x13
    376e:	9c 89       	ldd	r25, Y+20	; 0x14
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	9c 8b       	std	Y+20, r25	; 0x14
    3774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3776:	8b 89       	ldd	r24, Y+19	; 0x13
    3778:	9c 89       	ldd	r25, Y+20	; 0x14
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	69 f7       	brne	.-38     	; 0x3758 <Animation2+0x504>
    377e:	14 c0       	rjmp	.+40     	; 0x37a8 <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3780:	6d 89       	ldd	r22, Y+21	; 0x15
    3782:	7e 89       	ldd	r23, Y+22	; 0x16
    3784:	8f 89       	ldd	r24, Y+23	; 0x17
    3786:	98 8d       	ldd	r25, Y+24	; 0x18
    3788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9c 8b       	std	Y+20, r25	; 0x14
    3792:	8b 8b       	std	Y+19, r24	; 0x13
    3794:	8b 89       	ldd	r24, Y+19	; 0x13
    3796:	9c 89       	ldd	r25, Y+20	; 0x14
    3798:	98 8b       	std	Y+16, r25	; 0x10
    379a:	8f 87       	std	Y+15, r24	; 0x0f
    379c:	8f 85       	ldd	r24, Y+15	; 0x0f
    379e:	98 89       	ldd	r25, Y+16	; 0x10
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <Animation2+0x54c>
    37a4:	98 8b       	std	Y+16, r25	; 0x10
    37a6:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	aa ef       	ldi	r26, 0xFA	; 250
    37b4:	b3 e4       	ldi	r27, 0x43	; 67
    37b6:	8b 87       	std	Y+11, r24	; 0x0b
    37b8:	9c 87       	std	Y+12, r25	; 0x0c
    37ba:	ad 87       	std	Y+13, r26	; 0x0d
    37bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	48 ec       	ldi	r20, 0xC8	; 200
    37cc:	53 e4       	ldi	r21, 0x43	; 67
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8f 83       	std	Y+7, r24	; 0x07
    37d8:	98 87       	std	Y+8, r25	; 0x08
    37da:	a9 87       	std	Y+9, r26	; 0x09
    37dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37de:	6f 81       	ldd	r22, Y+7	; 0x07
    37e0:	78 85       	ldd	r23, Y+8	; 0x08
    37e2:	89 85       	ldd	r24, Y+9	; 0x09
    37e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f2:	88 23       	and	r24, r24
    37f4:	2c f4       	brge	.+10     	; 0x3800 <Animation2+0x5ac>
		__ticks = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
    37fe:	3f c0       	rjmp	.+126    	; 0x387e <Animation2+0x62a>
	else if (__tmp > 65535)
    3800:	6f 81       	ldd	r22, Y+7	; 0x07
    3802:	78 85       	ldd	r23, Y+8	; 0x08
    3804:	89 85       	ldd	r24, Y+9	; 0x09
    3806:	9a 85       	ldd	r25, Y+10	; 0x0a
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	57 e4       	ldi	r21, 0x47	; 71
    3810:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	4c f5       	brge	.+82     	; 0x386a <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3818:	6b 85       	ldd	r22, Y+11	; 0x0b
    381a:	7c 85       	ldd	r23, Y+12	; 0x0c
    381c:	8d 85       	ldd	r24, Y+13	; 0x0d
    381e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	9e 83       	std	Y+6, r25	; 0x06
    383e:	8d 83       	std	Y+5, r24	; 0x05
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <Animation2+0x60c>
    3842:	88 e2       	ldi	r24, 0x28	; 40
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9c 83       	std	Y+4, r25	; 0x04
    3848:	8b 83       	std	Y+3, r24	; 0x03
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <Animation2+0x5fa>
    3852:	9c 83       	std	Y+4, r25	; 0x04
    3854:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	8d 81       	ldd	r24, Y+5	; 0x05
    3862:	9e 81       	ldd	r25, Y+6	; 0x06
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f7       	brne	.-38     	; 0x3842 <Animation2+0x5ee>
    3868:	14 c0       	rjmp	.+40     	; 0x3892 <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	6f 81       	ldd	r22, Y+7	; 0x07
    386c:	78 85       	ldd	r23, Y+8	; 0x08
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <Animation2+0x636>
    388e:	9a 83       	std	Y+2, r25	; 0x02
    3890:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    3892:	cc 5a       	subi	r28, 0xAC	; 172
    3894:	df 4f       	sbci	r29, 0xFF	; 255
    3896:	0f b6       	in	r0, 0x3f	; 63
    3898:	f8 94       	cli
    389a:	de bf       	out	0x3e, r29	; 62
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	cf 91       	pop	r28
    38a2:	df 91       	pop	r29
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	08 95       	ret

000038aa <Animation3>:
void Animation3()
{
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	6c 97       	sbiw	r28, 0x1c	; 28
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    38c4:	82 e0       	ldi	r24, 0x02	; 2
    38c6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	0e 94 5d 15 	call	0x2aba	; 0x2aba <H_Led_void_setON>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	aa ef       	ldi	r26, 0xFA	; 250
    38d6:	b3 e4       	ldi	r27, 0x43	; 67
    38d8:	89 8f       	std	Y+25, r24	; 0x19
    38da:	9a 8f       	std	Y+26, r25	; 0x1a
    38dc:	ab 8f       	std	Y+27, r26	; 0x1b
    38de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	69 8d       	ldd	r22, Y+25	; 0x19
    38e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	48 ec       	ldi	r20, 0xC8	; 200
    38ee:	53 e4       	ldi	r21, 0x43	; 67
    38f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	8d 8b       	std	Y+21, r24	; 0x15
    38fa:	9e 8b       	std	Y+22, r25	; 0x16
    38fc:	af 8b       	std	Y+23, r26	; 0x17
    38fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3900:	6d 89       	ldd	r22, Y+21	; 0x15
    3902:	7e 89       	ldd	r23, Y+22	; 0x16
    3904:	8f 89       	ldd	r24, Y+23	; 0x17
    3906:	98 8d       	ldd	r25, Y+24	; 0x18
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e8       	ldi	r20, 0x80	; 128
    390e:	5f e3       	ldi	r21, 0x3F	; 63
    3910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3914:	88 23       	and	r24, r24
    3916:	2c f4       	brge	.+10     	; 0x3922 <Animation3+0x78>
		__ticks = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	9c 8b       	std	Y+20, r25	; 0x14
    391e:	8b 8b       	std	Y+19, r24	; 0x13
    3920:	3f c0       	rjmp	.+126    	; 0x39a0 <Animation3+0xf6>
	else if (__tmp > 65535)
    3922:	6d 89       	ldd	r22, Y+21	; 0x15
    3924:	7e 89       	ldd	r23, Y+22	; 0x16
    3926:	8f 89       	ldd	r24, Y+23	; 0x17
    3928:	98 8d       	ldd	r25, Y+24	; 0x18
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	4c f5       	brge	.+82     	; 0x398c <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393a:	69 8d       	ldd	r22, Y+25	; 0x19
    393c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e2       	ldi	r20, 0x20	; 32
    3948:	51 e4       	ldi	r21, 0x41	; 65
    394a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	bc 01       	movw	r22, r24
    3954:	cd 01       	movw	r24, r26
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9c 8b       	std	Y+20, r25	; 0x14
    3960:	8b 8b       	std	Y+19, r24	; 0x13
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <Animation3+0xd8>
    3964:	88 e2       	ldi	r24, 0x28	; 40
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	9a 8b       	std	Y+18, r25	; 0x12
    396a:	89 8b       	std	Y+17, r24	; 0x11
    396c:	89 89       	ldd	r24, Y+17	; 0x11
    396e:	9a 89       	ldd	r25, Y+18	; 0x12
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <Animation3+0xc6>
    3974:	9a 8b       	std	Y+18, r25	; 0x12
    3976:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	9c 89       	ldd	r25, Y+20	; 0x14
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	9c 8b       	std	Y+20, r25	; 0x14
    3980:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	8b 89       	ldd	r24, Y+19	; 0x13
    3984:	9c 89       	ldd	r25, Y+20	; 0x14
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	69 f7       	brne	.-38     	; 0x3964 <Animation3+0xba>
    398a:	14 c0       	rjmp	.+40     	; 0x39b4 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	6d 89       	ldd	r22, Y+21	; 0x15
    398e:	7e 89       	ldd	r23, Y+22	; 0x16
    3990:	8f 89       	ldd	r24, Y+23	; 0x17
    3992:	98 8d       	ldd	r25, Y+24	; 0x18
    3994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	9c 8b       	std	Y+20, r25	; 0x14
    399e:	8b 8b       	std	Y+19, r24	; 0x13
    39a0:	8b 89       	ldd	r24, Y+19	; 0x13
    39a2:	9c 89       	ldd	r25, Y+20	; 0x14
    39a4:	98 8b       	std	Y+16, r25	; 0x10
    39a6:	8f 87       	std	Y+15, r24	; 0x0f
    39a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39aa:	98 89       	ldd	r25, Y+16	; 0x10
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <Animation3+0x102>
    39b0:	98 8b       	std	Y+16, r25	; 0x10
    39b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    39ba:	82 e0       	ldi	r24, 0x02	; 2
    39bc:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <H_Led_void_setOFF>
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	aa ef       	ldi	r26, 0xFA	; 250
    39cc:	b3 e4       	ldi	r27, 0x43	; 67
    39ce:	8b 87       	std	Y+11, r24	; 0x0b
    39d0:	9c 87       	std	Y+12, r25	; 0x0c
    39d2:	ad 87       	std	Y+13, r26	; 0x0d
    39d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39da:	8d 85       	ldd	r24, Y+13	; 0x0d
    39dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	48 ec       	ldi	r20, 0xC8	; 200
    39e4:	53 e4       	ldi	r21, 0x43	; 67
    39e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	8f 83       	std	Y+7, r24	; 0x07
    39f0:	98 87       	std	Y+8, r25	; 0x08
    39f2:	a9 87       	std	Y+9, r26	; 0x09
    39f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f6:	6f 81       	ldd	r22, Y+7	; 0x07
    39f8:	78 85       	ldd	r23, Y+8	; 0x08
    39fa:	89 85       	ldd	r24, Y+9	; 0x09
    39fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	2c f4       	brge	.+10     	; 0x3a18 <Animation3+0x16e>
		__ticks = 1;
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	3f c0       	rjmp	.+126    	; 0x3a96 <Animation3+0x1ec>
	else if (__tmp > 65535)
    3a18:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1a:	78 85       	ldd	r23, Y+8	; 0x08
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	3f ef       	ldi	r19, 0xFF	; 255
    3a24:	4f e7       	ldi	r20, 0x7F	; 127
    3a26:	57 e4       	ldi	r21, 0x47	; 71
    3a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2c:	18 16       	cp	r1, r24
    3a2e:	4c f5       	brge	.+82     	; 0x3a82 <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	40 e2       	ldi	r20, 0x20	; 32
    3a3e:	51 e4       	ldi	r21, 0x41	; 65
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	bc 01       	movw	r22, r24
    3a4a:	cd 01       	movw	r24, r26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	0f c0       	rjmp	.+30     	; 0x3a78 <Animation3+0x1ce>
    3a5a:	88 e2       	ldi	r24, 0x28	; 40
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	9c 83       	std	Y+4, r25	; 0x04
    3a60:	8b 83       	std	Y+3, r24	; 0x03
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <Animation3+0x1bc>
    3a6a:	9c 83       	std	Y+4, r25	; 0x04
    3a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	9e 83       	std	Y+6, r25	; 0x06
    3a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	69 f7       	brne	.-38     	; 0x3a5a <Animation3+0x1b0>
    3a80:	14 c0       	rjmp	.+40     	; 0x3aaa <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a82:	6f 81       	ldd	r22, Y+7	; 0x07
    3a84:	78 85       	ldd	r23, Y+8	; 0x08
    3a86:	89 85       	ldd	r24, Y+9	; 0x09
    3a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	9a 83       	std	Y+2, r25	; 0x02
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	f1 f7       	brne	.-4      	; 0x3aa2 <Animation3+0x1f8>
    3aa6:	9a 83       	std	Y+2, r25	; 0x02
    3aa8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3aaa:	6c 96       	adiw	r28, 0x1c	; 28
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	cf 91       	pop	r28
    3ab8:	df 91       	pop	r29
    3aba:	08 95       	ret

00003abc <H_LCD_void_Init>:
#include "LCD_int.h"
#include<util/delay.h>


void H_LCD_void_Init(void)
{
    3abc:	df 93       	push	r29
    3abe:	cf 93       	push	r28
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	2e 97       	sbiw	r28, 0x0e	; 14
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	cd bf       	out	0x3d, r28	; 61
	//set direction
	//set direction RS,EN
	M_DIO_void_setPinDir(LCD_RS_PORT,LCD_RS_PIN, OUT);
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	61 e0       	ldi	r22, 0x01	; 1
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PORT, OUT);
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	//set direction D4....D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	67 e0       	ldi	r22, 0x07	; 7
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	66 e0       	ldi	r22, 0x06	; 6
    3af2:	41 e0       	ldi	r20, 0x01	; 1
    3af4:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	65 e0       	ldi	r22, 0x05	; 5
    3afc:	41 e0       	ldi	r20, 0x01	; 1
    3afe:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	64 e0       	ldi	r22, 0x04	; 4
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
#if (LCD_MODE== LCD_8BIT_MODE)
	//set direction D3....D0
	M_DIO_void_setPinDir(LCD_D3_PORT,LCD_D3_PIN,OUT);
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	63 e0       	ldi	r22, 0x03	; 3
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D2_PORT,LCD_D2_PIN,OUT);
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	62 e0       	ldi	r22, 0x02	; 2
    3b1a:	41 e0       	ldi	r20, 0x01	; 1
    3b1c:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D1_PORT,LCD_D1_PIN,OUT);
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	61 e0       	ldi	r22, 0x01	; 1
    3b24:	41 e0       	ldi	r20, 0x01	; 1
    3b26:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D0_PORT,LCD_D0_PIN,OUT);
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	41 e0       	ldi	r20, 0x01	; 1
    3b30:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	ac e0       	ldi	r26, 0x0C	; 12
    3b3a:	b2 e4       	ldi	r27, 0x42	; 66
    3b3c:	8b 87       	std	Y+11, r24	; 0x0b
    3b3e:	9c 87       	std	Y+12, r25	; 0x0c
    3b40:	ad 87       	std	Y+13, r26	; 0x0d
    3b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	48 ec       	ldi	r20, 0xC8	; 200
    3b52:	53 e4       	ldi	r21, 0x43	; 67
    3b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	8f 83       	std	Y+7, r24	; 0x07
    3b5e:	98 87       	std	Y+8, r25	; 0x08
    3b60:	a9 87       	std	Y+9, r26	; 0x09
    3b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b64:	6f 81       	ldd	r22, Y+7	; 0x07
    3b66:	78 85       	ldd	r23, Y+8	; 0x08
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	5f e3       	ldi	r21, 0x3F	; 63
    3b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b78:	88 23       	and	r24, r24
    3b7a:	2c f4       	brge	.+10     	; 0x3b86 <H_LCD_void_Init+0xca>
		__ticks = 1;
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	3f c0       	rjmp	.+126    	; 0x3c04 <H_LCD_void_Init+0x148>
	else if (__tmp > 65535)
    3b86:	6f 81       	ldd	r22, Y+7	; 0x07
    3b88:	78 85       	ldd	r23, Y+8	; 0x08
    3b8a:	89 85       	ldd	r24, Y+9	; 0x09
    3b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	3f ef       	ldi	r19, 0xFF	; 255
    3b92:	4f e7       	ldi	r20, 0x7F	; 127
    3b94:	57 e4       	ldi	r21, 0x47	; 71
    3b96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b9a:	18 16       	cp	r1, r24
    3b9c:	4c f5       	brge	.+82     	; 0x3bf0 <H_LCD_void_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e2       	ldi	r20, 0x20	; 32
    3bac:	51 e4       	ldi	r21, 0x41	; 65
    3bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	9e 83       	std	Y+6, r25	; 0x06
    3bc4:	8d 83       	std	Y+5, r24	; 0x05
    3bc6:	0f c0       	rjmp	.+30     	; 0x3be6 <H_LCD_void_Init+0x12a>
    3bc8:	88 e2       	ldi	r24, 0x28	; 40
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	9c 83       	std	Y+4, r25	; 0x04
    3bce:	8b 83       	std	Y+3, r24	; 0x03
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <H_LCD_void_Init+0x118>
    3bd8:	9c 83       	std	Y+4, r25	; 0x04
    3bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	9e 81       	ldd	r25, Y+6	; 0x06
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	9e 83       	std	Y+6, r25	; 0x06
    3be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be6:	8d 81       	ldd	r24, Y+5	; 0x05
    3be8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bea:	00 97       	sbiw	r24, 0x00	; 0
    3bec:	69 f7       	brne	.-38     	; 0x3bc8 <H_LCD_void_Init+0x10c>
    3bee:	14 c0       	rjmp	.+40     	; 0x3c18 <H_LCD_void_Init+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf2:	78 85       	ldd	r23, Y+8	; 0x08
    3bf4:	89 85       	ldd	r24, Y+9	; 0x09
    3bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	9a 83       	std	Y+2, r25	; 0x02
    3c0a:	89 83       	std	Y+1, r24	; 0x01
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <H_LCD_void_Init+0x154>
    3c14:	9a 83       	std	Y+2, r25	; 0x02
    3c16:	89 83       	std	Y+1, r24	; 0x01

#endif
	//send init sequence
#if(LCD_MODE== LCD_8BIT_MODE)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
    3c18:	88 e3       	ldi	r24, 0x38	; 56
    3c1a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>

#else
#error("wrong lcd mood")
#endif
	//display ON ,OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURS0N_BLINKOFF);
    3c1e:	8e e0       	ldi	r24, 0x0E	; 14
    3c20:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
	//display clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
	//entry mode set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    3c2a:	86 e0       	ldi	r24, 0x06	; 6
    3c2c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
}
    3c30:	2e 96       	adiw	r28, 0x0e	; 14
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	cf 91       	pop	r28
    3c3e:	df 91       	pop	r29
    3c40:	08 95       	ret

00003c42 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    3c42:	df 93       	push	r29
    3c44:	cf 93       	push	r28
    3c46:	0f 92       	push	r0
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=1;
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	61 e0       	ldi	r22, 0x01	; 1
    3c52:	41 e0       	ldi	r20, 0x01	; 1
    3c54:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>

	//step 2   write data
	H_LCD_void_writeNLatch( copy_u8data);
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <H_LCD_void_writeNLatch>
}
    3c5e:	0f 90       	pop	r0
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	0f 92       	push	r0
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	89 83       	std	Y+1, r24	; 0x01
	//step 1 RS=0
	M_DIO_void_setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	61 e0       	ldi	r22, 0x01	; 1
    3c76:	40 e0       	ldi	r20, 0x00	; 0
    3c78:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <H_LCD_void_writeNLatch>
}
    3c82:	0f 90       	pop	r0
    3c84:	cf 91       	pop	r28
    3c86:	df 91       	pop	r29
    3c88:	08 95       	ret

00003c8a <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 *pstr)
{
    3c8a:	df 93       	push	r29
    3c8c:	cf 93       	push	r28
    3c8e:	00 d0       	rcall	.+0      	; 0x3c90 <H_LCD_void_sendString+0x6>
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	0a c0       	rjmp	.+20     	; 0x3cae <H_LCD_void_sendString+0x24>
	while(*pstr)
	{
		H_LCD_void_sendData(*pstr);
    3c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9e:	80 81       	ld	r24, Z
    3ca0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <H_LCD_void_sendData>
		pstr++;
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca8:	01 96       	adiw	r24, 0x01	; 1
    3caa:	9a 83       	std	Y+2, r25	; 0x02
    3cac:	89 83       	std	Y+1, r24	; 0x01
	//step 2 write command
	H_LCD_void_writeNLatch( copy_u8command)	;
}
void H_LCD_void_sendString(const u8 *pstr)
{
	while(*pstr)
    3cae:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb2:	80 81       	ld	r24, Z
    3cb4:	88 23       	and	r24, r24
    3cb6:	89 f7       	brne	.-30     	; 0x3c9a <H_LCD_void_sendString+0x10>
		H_LCD_void_sendData(*pstr);
		pstr++;

	}

}
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY);
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
}
    3cd0:	cf 91       	pop	r28
    3cd2:	df 91       	pop	r29
    3cd4:	08 95       	ret

00003cd6 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32_Num)
{
    3cd6:	0f 93       	push	r16
    3cd8:	1f 93       	push	r17
    3cda:	df 93       	push	r29
    3cdc:	cf 93       	push	r28
    3cde:	cd b7       	in	r28, 0x3d	; 61
    3ce0:	de b7       	in	r29, 0x3e	; 62
    3ce2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	6c 87       	std	Y+12, r22	; 0x0c
    3cf0:	7d 87       	std	Y+13, r23	; 0x0d
    3cf2:	8e 87       	std	Y+14, r24	; 0x0e
    3cf4:	9f 87       	std	Y+15, r25	; 0x0f
  u8 loc_Arr[10]={0};
    3cf6:	8a e0       	ldi	r24, 0x0A	; 10
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	32 96       	adiw	r30, 0x02	; 2
    3cfc:	df 01       	movw	r26, r30
    3cfe:	98 2f       	mov	r25, r24
    3d00:	1d 92       	st	X+, r1
    3d02:	9a 95       	dec	r25
    3d04:	e9 f7       	brne	.-6      	; 0x3d00 <H_LCD_void_sendIntNum+0x2a>
  s8 i;
  if(copy_s32_Num==0)
    3d06:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d08:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d0a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d0c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	a1 05       	cpc	r26, r1
    3d12:	b1 05       	cpc	r27, r1
    3d14:	21 f4       	brne	.+8      	; 0x3d1e <H_LCD_void_sendIntNum+0x48>
  {
	  H_LCD_void_sendData('0');
    3d16:	80 e3       	ldi	r24, 0x30	; 48
    3d18:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <H_LCD_void_sendData>
    3d1c:	49 c0       	rjmp	.+146    	; 0x3db0 <H_LCD_void_sendIntNum+0xda>

  }
  else if (copy_s32_Num<0)
    3d1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d20:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d22:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d24:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d26:	bb 23       	and	r27, r27
    3d28:	0c f0       	brlt	.+2      	; 0x3d2c <H_LCD_void_sendIntNum+0x56>
    3d2a:	42 c0       	rjmp	.+132    	; 0x3db0 <H_LCD_void_sendIntNum+0xda>
  {
	  H_LCD_void_sendData('-');
    3d2c:	8d e2       	ldi	r24, 0x2D	; 45
    3d2e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <H_LCD_void_sendData>
	  copy_s32_Num*=-1;
    3d32:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d34:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d36:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d38:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d3a:	b0 95       	com	r27
    3d3c:	a0 95       	com	r26
    3d3e:	90 95       	com	r25
    3d40:	81 95       	neg	r24
    3d42:	9f 4f       	sbci	r25, 0xFF	; 255
    3d44:	af 4f       	sbci	r26, 0xFF	; 255
    3d46:	bf 4f       	sbci	r27, 0xFF	; 255
    3d48:	8c 87       	std	Y+12, r24	; 0x0c
    3d4a:	9d 87       	std	Y+13, r25	; 0x0d
    3d4c:	ae 87       	std	Y+14, r26	; 0x0e
    3d4e:	bf 87       	std	Y+15, r27	; 0x0f
    3d50:	2f c0       	rjmp	.+94     	; 0x3db0 <H_LCD_void_sendIntNum+0xda>
  }
  while (copy_s32_Num!=0)
  {
	  loc_Arr[i]=copy_s32_Num%10;
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	08 2f       	mov	r16, r24
    3d56:	11 27       	eor	r17, r17
    3d58:	07 fd       	sbrc	r16, 7
    3d5a:	10 95       	com	r17
    3d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d60:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d62:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d64:	2a e0       	ldi	r18, 0x0A	; 10
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e0       	ldi	r20, 0x00	; 0
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	bc 01       	movw	r22, r24
    3d6e:	cd 01       	movw	r24, r26
    3d70:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <__divmodsi4>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	28 2f       	mov	r18, r24
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	02 96       	adiw	r24, 0x02	; 2
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e0 0f       	add	r30, r16
    3d82:	f1 1f       	adc	r31, r17
    3d84:	20 83       	st	Z, r18
	  copy_s32_Num=copy_s32_Num/10;
    3d86:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d88:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d8a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d8c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d8e:	2a e0       	ldi	r18, 0x0A	; 10
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	bc 01       	movw	r22, r24
    3d98:	cd 01       	movw	r24, r26
    3d9a:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <__divmodsi4>
    3d9e:	da 01       	movw	r26, r20
    3da0:	c9 01       	movw	r24, r18
    3da2:	8c 87       	std	Y+12, r24	; 0x0c
    3da4:	9d 87       	std	Y+13, r25	; 0x0d
    3da6:	ae 87       	std	Y+14, r26	; 0x0e
    3da8:	bf 87       	std	Y+15, r27	; 0x0f
	  i++;
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	8f 5f       	subi	r24, 0xFF	; 255
    3dae:	89 83       	std	Y+1, r24	; 0x01
  else if (copy_s32_Num<0)
  {
	  H_LCD_void_sendData('-');
	  copy_s32_Num*=-1;
  }
  while (copy_s32_Num!=0)
    3db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3db2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3db4:	ae 85       	ldd	r26, Y+14	; 0x0e
    3db6:	bf 85       	ldd	r27, Y+15	; 0x0f
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	a1 05       	cpc	r26, r1
    3dbc:	b1 05       	cpc	r27, r1
    3dbe:	49 f6       	brne	.-110    	; 0x3d52 <H_LCD_void_sendIntNum+0x7c>
  {
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	81 50       	subi	r24, 0x01	; 1
    3dc4:	89 83       	std	Y+1, r24	; 0x01
    3dc6:	11 c0       	rjmp	.+34     	; 0x3dea <H_LCD_void_sendIntNum+0x114>
  while(i>=0)
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	28 2f       	mov	r18, r24
    3dcc:	33 27       	eor	r19, r19
    3dce:	27 fd       	sbrc	r18, 7
    3dd0:	30 95       	com	r19
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	02 96       	adiw	r24, 0x02	; 2
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	e2 0f       	add	r30, r18
    3dda:	f3 1f       	adc	r31, r19
    3ddc:	80 81       	ld	r24, Z
    3dde:	80 5d       	subi	r24, 0xD0	; 208
    3de0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <H_LCD_void_sendData>
	  i--;
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	89 83       	std	Y+1, r24	; 0x01
	  loc_Arr[i]=copy_s32_Num%10;
	  copy_s32_Num=copy_s32_Num/10;
	  i++;
  }
  i--;
  while(i>=0)
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	88 23       	and	r24, r24
    3dee:	64 f7       	brge	.-40     	; 0x3dc8 <H_LCD_void_sendIntNum+0xf2>
  {
	  H_LCD_void_sendData(loc_Arr[i]+'0');
	  i--;
  }
}
    3df0:	2f 96       	adiw	r28, 0x0f	; 15
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	1f 91       	pop	r17
    3e02:	0f 91       	pop	r16
    3e04:	08 95       	ret

00003e06 <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	00 d0       	rcall	.+0      	; 0x3e0c <H_LCD_void_gotXY+0x6>
    3e0c:	00 d0       	rcall	.+0      	; 0x3e0e <H_LCD_void_gotXY+0x8>
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	89 83       	std	Y+1, r24	; 0x01
    3e14:	6a 83       	std	Y+2, r22	; 0x02
 if (copy_u8Row==0||copy_u8Row==1)
    3e16:	89 81       	ldd	r24, Y+1	; 0x01
    3e18:	88 23       	and	r24, r24
    3e1a:	19 f0       	breq	.+6      	; 0x3e22 <H_LCD_void_gotXY+0x1c>
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	81 30       	cpi	r24, 0x01	; 1
    3e20:	d9 f4       	brne	.+54     	; 0x3e58 <H_LCD_void_gotXY+0x52>
 {
	 if(copy_u8Col >= 0 &&copy_u8Col <=15)
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	80 31       	cpi	r24, 0x10	; 16
    3e26:	c0 f4       	brcc	.+48     	; 0x3e58 <H_LCD_void_gotXY+0x52>
	 {
		 switch(copy_u8Row)
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	3c 83       	std	Y+4, r19	; 0x04
    3e30:	2b 83       	std	Y+3, r18	; 0x03
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	00 97       	sbiw	r24, 0x00	; 0
    3e38:	31 f0       	breq	.+12     	; 0x3e46 <H_LCD_void_gotXY+0x40>
    3e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e3c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e3e:	21 30       	cpi	r18, 0x01	; 1
    3e40:	31 05       	cpc	r19, r1
    3e42:	31 f0       	breq	.+12     	; 0x3e50 <H_LCD_void_gotXY+0x4a>
    3e44:	09 c0       	rjmp	.+18     	; 0x3e58 <H_LCD_void_gotXY+0x52>
		 {
		 case 0 :
			 H_LCD_void_sendCommand(LCD_R0C0+copy_u8Col);
    3e46:	8a 81       	ldd	r24, Y+2	; 0x02
    3e48:	80 58       	subi	r24, 0x80	; 128
    3e4a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
    3e4e:	04 c0       	rjmp	.+8      	; 0x3e58 <H_LCD_void_gotXY+0x52>
			 break;

		 case 1:
			 H_LCD_void_sendCommand(LCD_R1C0+copy_u8Col);
    3e50:	8a 81       	ldd	r24, Y+2	; 0x02
    3e52:	80 54       	subi	r24, 0x40	; 64
    3e54:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <H_LCD_void_sendCommand>
			 break;

		 }
	 }
 }
}
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 *ArrPattern,u8 copy_u8char)
{
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <H_LCD_void_creatCustomChar+0x6>
    3e6c:	0f 92       	push	r0
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	6b 83       	std	Y+3, r22	; 0x03

}
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8char)
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	0f 92       	push	r0
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	89 83       	std	Y+1, r24	; 0x01

}
    3e90:	0f 90       	pop	r0
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <calculator_App>:
f32  calculator_App(f32 a,f32 b,u8 operator)
{
    3e98:	0f 93       	push	r16
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	6d 83       	std	Y+5, r22	; 0x05
    3eb0:	7e 83       	std	Y+6, r23	; 0x06
    3eb2:	8f 83       	std	Y+7, r24	; 0x07
    3eb4:	98 87       	std	Y+8, r25	; 0x08
    3eb6:	29 87       	std	Y+9, r18	; 0x09
    3eb8:	3a 87       	std	Y+10, r19	; 0x0a
    3eba:	4b 87       	std	Y+11, r20	; 0x0b
    3ebc:	5c 87       	std	Y+12, r21	; 0x0c
    3ebe:	0d 87       	std	Y+13, r16	; 0x0d
	f32 result;
	switch(operator)
    3ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	3f 87       	std	Y+15, r19	; 0x0f
    3ec8:	2e 87       	std	Y+14, r18	; 0x0e
    3eca:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ecc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ece:	8b 32       	cpi	r24, 0x2B	; 43
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	b1 f0       	breq	.+44     	; 0x3f00 <calculator_App+0x68>
    3ed4:	2e 85       	ldd	r18, Y+14	; 0x0e
    3ed6:	3f 85       	ldd	r19, Y+15	; 0x0f
    3ed8:	2c 32       	cpi	r18, 0x2C	; 44
    3eda:	31 05       	cpc	r19, r1
    3edc:	34 f4       	brge	.+12     	; 0x3eea <calculator_App+0x52>
    3ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ee2:	8a 32       	cpi	r24, 0x2A	; 42
    3ee4:	91 05       	cpc	r25, r1
    3ee6:	71 f1       	breq	.+92     	; 0x3f44 <calculator_App+0xac>
    3ee8:	4e c0       	rjmp	.+156    	; 0x3f86 <calculator_App+0xee>
    3eea:	2e 85       	ldd	r18, Y+14	; 0x0e
    3eec:	3f 85       	ldd	r19, Y+15	; 0x0f
    3eee:	2d 32       	cpi	r18, 0x2D	; 45
    3ef0:	31 05       	cpc	r19, r1
    3ef2:	b9 f0       	breq	.+46     	; 0x3f22 <calculator_App+0x8a>
    3ef4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ef6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ef8:	8f 32       	cpi	r24, 0x2F	; 47
    3efa:	91 05       	cpc	r25, r1
    3efc:	a1 f1       	breq	.+104    	; 0x3f66 <calculator_App+0xce>
    3efe:	43 c0       	rjmp	.+134    	; 0x3f86 <calculator_App+0xee>
	{
	case('+'):
			result=a+b;
    3f00:	6d 81       	ldd	r22, Y+5	; 0x05
    3f02:	7e 81       	ldd	r23, Y+6	; 0x06
    3f04:	8f 81       	ldd	r24, Y+7	; 0x07
    3f06:	98 85       	ldd	r25, Y+8	; 0x08
    3f08:	29 85       	ldd	r18, Y+9	; 0x09
    3f0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f10:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	89 83       	std	Y+1, r24	; 0x01
    3f1a:	9a 83       	std	Y+2, r25	; 0x02
    3f1c:	ab 83       	std	Y+3, r26	; 0x03
    3f1e:	bc 83       	std	Y+4, r27	; 0x04
    3f20:	32 c0       	rjmp	.+100    	; 0x3f86 <calculator_App+0xee>
	        break;
	case('-'):
			result=a-b;
    3f22:	6d 81       	ldd	r22, Y+5	; 0x05
    3f24:	7e 81       	ldd	r23, Y+6	; 0x06
    3f26:	8f 81       	ldd	r24, Y+7	; 0x07
    3f28:	98 85       	ldd	r25, Y+8	; 0x08
    3f2a:	29 85       	ldd	r18, Y+9	; 0x09
    3f2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f30:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f32:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	89 83       	std	Y+1, r24	; 0x01
    3f3c:	9a 83       	std	Y+2, r25	; 0x02
    3f3e:	ab 83       	std	Y+3, r26	; 0x03
    3f40:	bc 83       	std	Y+4, r27	; 0x04
    3f42:	21 c0       	rjmp	.+66     	; 0x3f86 <calculator_App+0xee>
		     break;
	case('*'):
			result=a*b;
    3f44:	6d 81       	ldd	r22, Y+5	; 0x05
    3f46:	7e 81       	ldd	r23, Y+6	; 0x06
    3f48:	8f 81       	ldd	r24, Y+7	; 0x07
    3f4a:	98 85       	ldd	r25, Y+8	; 0x08
    3f4c:	29 85       	ldd	r18, Y+9	; 0x09
    3f4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f50:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f52:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	89 83       	std	Y+1, r24	; 0x01
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	ab 83       	std	Y+3, r26	; 0x03
    3f62:	bc 83       	std	Y+4, r27	; 0x04
    3f64:	10 c0       	rjmp	.+32     	; 0x3f86 <calculator_App+0xee>
		     break;
	case('/'):
			result=a/b;
    3f66:	6d 81       	ldd	r22, Y+5	; 0x05
    3f68:	7e 81       	ldd	r23, Y+6	; 0x06
    3f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6c:	98 85       	ldd	r25, Y+8	; 0x08
    3f6e:	29 85       	ldd	r18, Y+9	; 0x09
    3f70:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f72:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f74:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	89 83       	std	Y+1, r24	; 0x01
    3f80:	9a 83       	std	Y+2, r25	; 0x02
    3f82:	ab 83       	std	Y+3, r26	; 0x03
    3f84:	bc 83       	std	Y+4, r27	; 0x04
		      break;

	}
	return result;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8a:	ab 81       	ldd	r26, Y+3	; 0x03
    3f8c:	bc 81       	ldd	r27, Y+4	; 0x04

}
    3f8e:	bc 01       	movw	r22, r24
    3f90:	cd 01       	movw	r24, r26
    3f92:	2f 96       	adiw	r28, 0x0f	; 15
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	0f 91       	pop	r16
    3fa4:	08 95       	ret

00003fa6 <H_LCD_void_writeNLatch>:
static void H_LCD_void_writeNLatch(u8 copy_u8Byte)
{
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	6d 97       	sbiw	r28, 0x1d	; 29
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	8d 8f       	std	Y+29, r24	; 0x1d
#if(LCD_MODE== LCD_8BIT_MODE)
	//EN=0, disabled
		M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	62 e0       	ldi	r22, 0x02	; 2
    3fc0:	40 e0       	ldi	r20, 0x00	; 0
    3fc2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	//step1 prepare data (DB7...DB0)

	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    3fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc8:	98 2f       	mov	r25, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	99 27       	eor	r25, r25
    3fce:	99 1f       	adc	r25, r25
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	67 e0       	ldi	r22, 0x07	; 7
    3fd4:	49 2f       	mov	r20, r25
    3fd6:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    3fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fdc:	82 95       	swap	r24
    3fde:	86 95       	lsr	r24
    3fe0:	86 95       	lsr	r24
    3fe2:	83 70       	andi	r24, 0x03	; 3
    3fe4:	98 2f       	mov	r25, r24
    3fe6:	91 70       	andi	r25, 0x01	; 1
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	66 e0       	ldi	r22, 0x06	; 6
    3fec:	49 2f       	mov	r20, r25
    3fee:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    3ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ff4:	82 95       	swap	r24
    3ff6:	86 95       	lsr	r24
    3ff8:	87 70       	andi	r24, 0x07	; 7
    3ffa:	98 2f       	mov	r25, r24
    3ffc:	91 70       	andi	r25, 0x01	; 1
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	65 e0       	ldi	r22, 0x05	; 5
    4002:	49 2f       	mov	r20, r25
    4004:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    4008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    400a:	82 95       	swap	r24
    400c:	8f 70       	andi	r24, 0x0F	; 15
    400e:	98 2f       	mov	r25, r24
    4010:	91 70       	andi	r25, 0x01	; 1
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	64 e0       	ldi	r22, 0x04	; 4
    4016:	49 2f       	mov	r20, r25
    4018:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D3_PORT,LCD_D3_PIN,GET_BIT(copy_u8Byte,3));
    401c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    401e:	86 95       	lsr	r24
    4020:	86 95       	lsr	r24
    4022:	86 95       	lsr	r24
    4024:	98 2f       	mov	r25, r24
    4026:	91 70       	andi	r25, 0x01	; 1
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	63 e0       	ldi	r22, 0x03	; 3
    402c:	49 2f       	mov	r20, r25
    402e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D2_PORT,LCD_D2_PIN,GET_BIT(copy_u8Byte,2));
    4032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4034:	86 95       	lsr	r24
    4036:	86 95       	lsr	r24
    4038:	98 2f       	mov	r25, r24
    403a:	91 70       	andi	r25, 0x01	; 1
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	62 e0       	ldi	r22, 0x02	; 2
    4040:	49 2f       	mov	r20, r25
    4042:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D1_PORT,LCD_D1_PIN,GET_BIT(copy_u8Byte,1));
    4046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4048:	86 95       	lsr	r24
    404a:	98 2f       	mov	r25, r24
    404c:	91 70       	andi	r25, 0x01	; 1
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	61 e0       	ldi	r22, 0x01	; 1
    4052:	49 2f       	mov	r20, r25
    4054:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D0_PORT,LCD_D0_PIN,GET_BIT(copy_u8Byte,0));
    4058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    405a:	98 2f       	mov	r25, r24
    405c:	91 70       	andi	r25, 0x01	; 1
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	60 e0       	ldi	r22, 0x00	; 0
    4062:	49 2f       	mov	r20, r25
    4064:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	//step2 activate enable ,(E=1)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	62 e0       	ldi	r22, 0x02	; 2
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e8       	ldi	r26, 0x80	; 128
    4078:	bf e3       	ldi	r27, 0x3F	; 63
    407a:	89 8f       	std	Y+25, r24	; 0x19
    407c:	9a 8f       	std	Y+26, r25	; 0x1a
    407e:	ab 8f       	std	Y+27, r26	; 0x1b
    4080:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4082:	69 8d       	ldd	r22, Y+25	; 0x19
    4084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	48 ec       	ldi	r20, 0xC8	; 200
    4090:	53 e4       	ldi	r21, 0x43	; 67
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	8d 8b       	std	Y+21, r24	; 0x15
    409c:	9e 8b       	std	Y+22, r25	; 0x16
    409e:	af 8b       	std	Y+23, r26	; 0x17
    40a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40a2:	6d 89       	ldd	r22, Y+21	; 0x15
    40a4:	7e 89       	ldd	r23, Y+22	; 0x16
    40a6:	8f 89       	ldd	r24, Y+23	; 0x17
    40a8:	98 8d       	ldd	r25, Y+24	; 0x18
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e8       	ldi	r20, 0x80	; 128
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40b6:	88 23       	and	r24, r24
    40b8:	2c f4       	brge	.+10     	; 0x40c4 <H_LCD_void_writeNLatch+0x11e>
		__ticks = 1;
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9c 8b       	std	Y+20, r25	; 0x14
    40c0:	8b 8b       	std	Y+19, r24	; 0x13
    40c2:	3f c0       	rjmp	.+126    	; 0x4142 <H_LCD_void_writeNLatch+0x19c>
	else if (__tmp > 65535)
    40c4:	6d 89       	ldd	r22, Y+21	; 0x15
    40c6:	7e 89       	ldd	r23, Y+22	; 0x16
    40c8:	8f 89       	ldd	r24, Y+23	; 0x17
    40ca:	98 8d       	ldd	r25, Y+24	; 0x18
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	3f ef       	ldi	r19, 0xFF	; 255
    40d0:	4f e7       	ldi	r20, 0x7F	; 127
    40d2:	57 e4       	ldi	r21, 0x47	; 71
    40d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d8:	18 16       	cp	r1, r24
    40da:	4c f5       	brge	.+82     	; 0x412e <H_LCD_void_writeNLatch+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40dc:	69 8d       	ldd	r22, Y+25	; 0x19
    40de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e2       	ldi	r20, 0x20	; 32
    40ea:	51 e4       	ldi	r21, 0x41	; 65
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9c 8b       	std	Y+20, r25	; 0x14
    4102:	8b 8b       	std	Y+19, r24	; 0x13
    4104:	0f c0       	rjmp	.+30     	; 0x4124 <H_LCD_void_writeNLatch+0x17e>
    4106:	88 e2       	ldi	r24, 0x28	; 40
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	9a 8b       	std	Y+18, r25	; 0x12
    410c:	89 8b       	std	Y+17, r24	; 0x11
    410e:	89 89       	ldd	r24, Y+17	; 0x11
    4110:	9a 89       	ldd	r25, Y+18	; 0x12
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <H_LCD_void_writeNLatch+0x16c>
    4116:	9a 8b       	std	Y+18, r25	; 0x12
    4118:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411a:	8b 89       	ldd	r24, Y+19	; 0x13
    411c:	9c 89       	ldd	r25, Y+20	; 0x14
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	9c 8b       	std	Y+20, r25	; 0x14
    4122:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4124:	8b 89       	ldd	r24, Y+19	; 0x13
    4126:	9c 89       	ldd	r25, Y+20	; 0x14
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	69 f7       	brne	.-38     	; 0x4106 <H_LCD_void_writeNLatch+0x160>
    412c:	14 c0       	rjmp	.+40     	; 0x4156 <H_LCD_void_writeNLatch+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412e:	6d 89       	ldd	r22, Y+21	; 0x15
    4130:	7e 89       	ldd	r23, Y+22	; 0x16
    4132:	8f 89       	ldd	r24, Y+23	; 0x17
    4134:	98 8d       	ldd	r25, Y+24	; 0x18
    4136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	9c 8b       	std	Y+20, r25	; 0x14
    4140:	8b 8b       	std	Y+19, r24	; 0x13
    4142:	8b 89       	ldd	r24, Y+19	; 0x13
    4144:	9c 89       	ldd	r25, Y+20	; 0x14
    4146:	98 8b       	std	Y+16, r25	; 0x10
    4148:	8f 87       	std	Y+15, r24	; 0x0f
    414a:	8f 85       	ldd	r24, Y+15	; 0x0f
    414c:	98 89       	ldd	r25, Y+16	; 0x10
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <H_LCD_void_writeNLatch+0x1a8>
    4152:	98 8b       	std	Y+16, r25	; 0x10
    4154:	8f 87       	std	Y+15, r24	; 0x0f

	//step3 : delay for 1msec
	_delay_ms(1);

	//step4 :deactivate enable (E=10)
	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	62 e0       	ldi	r22, 0x02	; 2
    415a:	40 e0       	ldi	r20, 0x00	; 0
    415c:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	a0 ea       	ldi	r26, 0xA0	; 160
    4166:	b0 e4       	ldi	r27, 0x40	; 64
    4168:	8b 87       	std	Y+11, r24	; 0x0b
    416a:	9c 87       	std	Y+12, r25	; 0x0c
    416c:	ad 87       	std	Y+13, r26	; 0x0d
    416e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4170:	6b 85       	ldd	r22, Y+11	; 0x0b
    4172:	7c 85       	ldd	r23, Y+12	; 0x0c
    4174:	8d 85       	ldd	r24, Y+13	; 0x0d
    4176:	9e 85       	ldd	r25, Y+14	; 0x0e
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	48 ec       	ldi	r20, 0xC8	; 200
    417e:	53 e4       	ldi	r21, 0x43	; 67
    4180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	8f 83       	std	Y+7, r24	; 0x07
    418a:	98 87       	std	Y+8, r25	; 0x08
    418c:	a9 87       	std	Y+9, r26	; 0x09
    418e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4190:	6f 81       	ldd	r22, Y+7	; 0x07
    4192:	78 85       	ldd	r23, Y+8	; 0x08
    4194:	89 85       	ldd	r24, Y+9	; 0x09
    4196:	9a 85       	ldd	r25, Y+10	; 0x0a
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e8       	ldi	r20, 0x80	; 128
    419e:	5f e3       	ldi	r21, 0x3F	; 63
    41a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41a4:	88 23       	and	r24, r24
    41a6:	2c f4       	brge	.+10     	; 0x41b2 <H_LCD_void_writeNLatch+0x20c>
		__ticks = 1;
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	9e 83       	std	Y+6, r25	; 0x06
    41ae:	8d 83       	std	Y+5, r24	; 0x05
    41b0:	3f c0       	rjmp	.+126    	; 0x4230 <H_LCD_void_writeNLatch+0x28a>
	else if (__tmp > 65535)
    41b2:	6f 81       	ldd	r22, Y+7	; 0x07
    41b4:	78 85       	ldd	r23, Y+8	; 0x08
    41b6:	89 85       	ldd	r24, Y+9	; 0x09
    41b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	3f ef       	ldi	r19, 0xFF	; 255
    41be:	4f e7       	ldi	r20, 0x7F	; 127
    41c0:	57 e4       	ldi	r21, 0x47	; 71
    41c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41c6:	18 16       	cp	r1, r24
    41c8:	4c f5       	brge	.+82     	; 0x421c <H_LCD_void_writeNLatch+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    41cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	bc 01       	movw	r22, r24
    41e4:	cd 01       	movw	r24, r26
    41e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	9e 83       	std	Y+6, r25	; 0x06
    41f0:	8d 83       	std	Y+5, r24	; 0x05
    41f2:	0f c0       	rjmp	.+30     	; 0x4212 <H_LCD_void_writeNLatch+0x26c>
    41f4:	88 e2       	ldi	r24, 0x28	; 40
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	9c 83       	std	Y+4, r25	; 0x04
    41fa:	8b 83       	std	Y+3, r24	; 0x03
    41fc:	8b 81       	ldd	r24, Y+3	; 0x03
    41fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	f1 f7       	brne	.-4      	; 0x4200 <H_LCD_void_writeNLatch+0x25a>
    4204:	9c 83       	std	Y+4, r25	; 0x04
    4206:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4208:	8d 81       	ldd	r24, Y+5	; 0x05
    420a:	9e 81       	ldd	r25, Y+6	; 0x06
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4212:	8d 81       	ldd	r24, Y+5	; 0x05
    4214:	9e 81       	ldd	r25, Y+6	; 0x06
    4216:	00 97       	sbiw	r24, 0x00	; 0
    4218:	69 f7       	brne	.-38     	; 0x41f4 <H_LCD_void_writeNLatch+0x24e>
    421a:	14 c0       	rjmp	.+40     	; 0x4244 <H_LCD_void_writeNLatch+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    421c:	6f 81       	ldd	r22, Y+7	; 0x07
    421e:	78 85       	ldd	r23, Y+8	; 0x08
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	9e 83       	std	Y+6, r25	; 0x06
    422e:	8d 83       	std	Y+5, r24	; 0x05
    4230:	8d 81       	ldd	r24, Y+5	; 0x05
    4232:	9e 81       	ldd	r25, Y+6	; 0x06
    4234:	9a 83       	std	Y+2, r25	; 0x02
    4236:	89 83       	std	Y+1, r24	; 0x01
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <H_LCD_void_writeNLatch+0x296>
    4240:	9a 83       	std	Y+2, r25	; 0x02
    4242:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
#else
  #error("wrong lcd mode")
#endif

}
    4244:	6d 96       	adiw	r28, 0x1d	; 29
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	cf 91       	pop	r28
    4252:	df 91       	pop	r29
    4254:	08 95       	ret

00004256 <H_KEYPAD_void_init>:
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"
#include<util/delay.h>

void H_KEYPAD_void_init()
{
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
	//set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	64 e0       	ldi	r22, 0x04	; 4
    4262:	41 e0       	ldi	r20, 0x01	; 1
    4264:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	65 e0       	ldi	r22, 0x05	; 5
    426c:	41 e0       	ldi	r20, 0x01	; 1
    426e:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	66 e0       	ldi	r22, 0x06	; 6
    4276:	41 e0       	ldi	r20, 0x01	; 1
    4278:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	67 e0       	ldi	r22, 0x07	; 7
    4280:	41 e0       	ldi	r20, 0x01	; 1
    4282:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT, KEYPAD_C0_PIN, IN);
    4286:	83 e0       	ldi	r24, 0x03	; 3
    4288:	62 e0       	ldi	r22, 0x02	; 2
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    4290:	83 e0       	ldi	r24, 0x03	; 3
    4292:	63 e0       	ldi	r22, 0x03	; 3
    4294:	40 e0       	ldi	r20, 0x00	; 0
    4296:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    429a:	83 e0       	ldi	r24, 0x03	; 3
    429c:	64 e0       	ldi	r22, 0x04	; 4
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    42a4:	83 e0       	ldi	r24, 0x03	; 3
    42a6:	65 e0       	ldi	r22, 0x05	; 5
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	64 e0       	ldi	r22, 0x04	; 4
    42b2:	41 e0       	ldi	r20, 0x01	; 1
    42b4:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	65 e0       	ldi	r22, 0x05	; 5
    42bc:	41 e0       	ldi	r20, 0x01	; 1
    42be:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	66 e0       	ldi	r22, 0x06	; 6
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	67 e0       	ldi	r22, 0x07	; 7
    42d0:	41 e0       	ldi	r20, 0x01	; 1
    42d2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
    }
    42d6:	cf 91       	pop	r28
    42d8:	df 91       	pop	r29
    42da:	08 95       	ret

000042dc <H_KEYPAD_void_getPressedKey>:

u8 H_KEYPAD_void_getPressedKey()
{
    42dc:	df 93       	push	r29
    42de:	cf 93       	push	r28
    42e0:	cd b7       	in	r28, 0x3d	; 61
    42e2:	de b7       	in	r29, 0x3e	; 62
    42e4:	a8 97       	sbiw	r28, 0x28	; 40
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	f8 94       	cli
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	cd bf       	out	0x3d, r28	; 61
	u8 loc_Key= NUM_PRESSED_KEY ;
    42f0:	8f ef       	ldi	r24, 0xFF	; 255
    42f2:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    42f4:	ce 01       	movw	r24, r28
    42f6:	42 96       	adiw	r24, 0x12	; 18
    42f8:	9d a3       	std	Y+37, r25	; 0x25
    42fa:	8c a3       	std	Y+36, r24	; 0x24
    42fc:	ec e7       	ldi	r30, 0x7C	; 124
    42fe:	f1 e0       	ldi	r31, 0x01	; 1
    4300:	ff a3       	std	Y+39, r31	; 0x27
    4302:	ee a3       	std	Y+38, r30	; 0x26
    4304:	f0 e1       	ldi	r31, 0x10	; 16
    4306:	f8 a7       	std	Y+40, r31	; 0x28
    4308:	ee a1       	ldd	r30, Y+38	; 0x26
    430a:	ff a1       	ldd	r31, Y+39	; 0x27
    430c:	00 80       	ld	r0, Z
    430e:	8e a1       	ldd	r24, Y+38	; 0x26
    4310:	9f a1       	ldd	r25, Y+39	; 0x27
    4312:	01 96       	adiw	r24, 0x01	; 1
    4314:	9f a3       	std	Y+39, r25	; 0x27
    4316:	8e a3       	std	Y+38, r24	; 0x26
    4318:	ec a1       	ldd	r30, Y+36	; 0x24
    431a:	fd a1       	ldd	r31, Y+37	; 0x25
    431c:	00 82       	st	Z, r0
    431e:	8c a1       	ldd	r24, Y+36	; 0x24
    4320:	9d a1       	ldd	r25, Y+37	; 0x25
    4322:	01 96       	adiw	r24, 0x01	; 1
    4324:	9d a3       	std	Y+37, r25	; 0x25
    4326:	8c a3       	std	Y+36, r24	; 0x24
    4328:	98 a5       	ldd	r25, Y+40	; 0x28
    432a:	91 50       	subi	r25, 0x01	; 1
    432c:	98 a7       	std	Y+40, r25	; 0x28
    432e:	e8 a5       	ldd	r30, Y+40	; 0x28
    4330:	ee 23       	and	r30, r30
    4332:	51 f7       	brne	.-44     	; 0x4308 <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    4334:	84 e0       	ldi	r24, 0x04	; 4
    4336:	88 8b       	std	Y+16, r24	; 0x10
    4338:	c9 c0       	rjmp	.+402    	; 0x44cc <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	68 89       	ldd	r22, Y+16	; 0x10
    433e:	40 e0       	ldi	r20, 0x00	; 0
    4340:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    4344:	82 e0       	ldi	r24, 0x02	; 2
    4346:	8f 87       	std	Y+15, r24	; 0x0f
    4348:	b5 c0       	rjmp	.+362    	; 0x44b4 <H_KEYPAD_void_getPressedKey+0x1d8>
		{
			M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    434a:	9e 01       	movw	r18, r28
    434c:	2e 5d       	subi	r18, 0xDE	; 222
    434e:	3f 4f       	sbci	r19, 0xFF	; 255
    4350:	83 e0       	ldi	r24, 0x03	; 3
    4352:	6f 85       	ldd	r22, Y+15	; 0x0f
    4354:	a9 01       	movw	r20, r18
    4356:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
			if(read==ACTIVE_LOW_PRESSED)
    435a:	8a a1       	ldd	r24, Y+34	; 0x22
    435c:	88 23       	and	r24, r24
    435e:	09 f0       	breq	.+2      	; 0x4362 <H_KEYPAD_void_getPressedKey+0x86>
    4360:	a6 c0       	rjmp	.+332    	; 0x44ae <H_KEYPAD_void_getPressedKey+0x1d2>
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	a8 ec       	ldi	r26, 0xC8	; 200
    4368:	b2 e4       	ldi	r27, 0x42	; 66
    436a:	8b 87       	std	Y+11, r24	; 0x0b
    436c:	9c 87       	std	Y+12, r25	; 0x0c
    436e:	ad 87       	std	Y+13, r26	; 0x0d
    4370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4372:	6b 85       	ldd	r22, Y+11	; 0x0b
    4374:	7c 85       	ldd	r23, Y+12	; 0x0c
    4376:	8d 85       	ldd	r24, Y+13	; 0x0d
    4378:	9e 85       	ldd	r25, Y+14	; 0x0e
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	48 ec       	ldi	r20, 0xC8	; 200
    4380:	53 e4       	ldi	r21, 0x43	; 67
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	8f 83       	std	Y+7, r24	; 0x07
    438c:	98 87       	std	Y+8, r25	; 0x08
    438e:	a9 87       	std	Y+9, r26	; 0x09
    4390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4392:	6f 81       	ldd	r22, Y+7	; 0x07
    4394:	78 85       	ldd	r23, Y+8	; 0x08
    4396:	89 85       	ldd	r24, Y+9	; 0x09
    4398:	9a 85       	ldd	r25, Y+10	; 0x0a
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	40 e8       	ldi	r20, 0x80	; 128
    43a0:	5f e3       	ldi	r21, 0x3F	; 63
    43a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a6:	88 23       	and	r24, r24
    43a8:	2c f4       	brge	.+10     	; 0x43b4 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	9e 83       	std	Y+6, r25	; 0x06
    43b0:	8d 83       	std	Y+5, r24	; 0x05
    43b2:	3f c0       	rjmp	.+126    	; 0x4432 <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    43b4:	6f 81       	ldd	r22, Y+7	; 0x07
    43b6:	78 85       	ldd	r23, Y+8	; 0x08
    43b8:	89 85       	ldd	r24, Y+9	; 0x09
    43ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	3f ef       	ldi	r19, 0xFF	; 255
    43c0:	4f e7       	ldi	r20, 0x7F	; 127
    43c2:	57 e4       	ldi	r21, 0x47	; 71
    43c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c8:	18 16       	cp	r1, r24
    43ca:	4c f5       	brge	.+82     	; 0x441e <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	40 e2       	ldi	r20, 0x20	; 32
    43da:	51 e4       	ldi	r21, 0x41	; 65
    43dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	bc 01       	movw	r22, r24
    43e6:	cd 01       	movw	r24, r26
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
    43f4:	0f c0       	rjmp	.+30     	; 0x4414 <H_KEYPAD_void_getPressedKey+0x138>
    43f6:	88 e2       	ldi	r24, 0x28	; 40
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	9c 83       	std	Y+4, r25	; 0x04
    43fc:	8b 83       	std	Y+3, r24	; 0x03
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	9c 81       	ldd	r25, Y+4	; 0x04
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	f1 f7       	brne	.-4      	; 0x4402 <H_KEYPAD_void_getPressedKey+0x126>
    4406:	9c 83       	std	Y+4, r25	; 0x04
    4408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	9e 81       	ldd	r25, Y+6	; 0x06
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	9e 83       	std	Y+6, r25	; 0x06
    4412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4414:	8d 81       	ldd	r24, Y+5	; 0x05
    4416:	9e 81       	ldd	r25, Y+6	; 0x06
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	69 f7       	brne	.-38     	; 0x43f6 <H_KEYPAD_void_getPressedKey+0x11a>
    441c:	14 c0       	rjmp	.+40     	; 0x4446 <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441e:	6f 81       	ldd	r22, Y+7	; 0x07
    4420:	78 85       	ldd	r23, Y+8	; 0x08
    4422:	89 85       	ldd	r24, Y+9	; 0x09
    4424:	9a 85       	ldd	r25, Y+10	; 0x0a
    4426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	9e 83       	std	Y+6, r25	; 0x06
    4430:	8d 83       	std	Y+5, r24	; 0x05
    4432:	8d 81       	ldd	r24, Y+5	; 0x05
    4434:	9e 81       	ldd	r25, Y+6	; 0x06
    4436:	9a 83       	std	Y+2, r25	; 0x02
    4438:	89 83       	std	Y+1, r24	; 0x01
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	9a 81       	ldd	r25, Y+2	; 0x02
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <H_KEYPAD_void_getPressedKey+0x162>
    4442:	9a 83       	std	Y+2, r25	; 0x02
    4444:	89 83       	std	Y+1, r24	; 0x01
			{
				//debouncing delay
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    4446:	9e 01       	movw	r18, r28
    4448:	2e 5d       	subi	r18, 0xDE	; 222
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	83 e0       	ldi	r24, 0x03	; 3
    444e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4450:	a9 01       	movw	r20, r18
    4452:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
				if(read==ACTIVE_LOW_PRESSED)
    4456:	8a a1       	ldd	r24, Y+34	; 0x22
    4458:	88 23       	and	r24, r24
    445a:	49 f5       	brne	.+82     	; 0x44ae <H_KEYPAD_void_getPressedKey+0x1d2>
    445c:	08 c0       	rjmp	.+16     	; 0x446e <H_KEYPAD_void_getPressedKey+0x192>
				{

						while(read==ACTIVE_LOW_PRESSED)
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
    445e:	9e 01       	movw	r18, r28
    4460:	2e 5d       	subi	r18, 0xDE	; 222
    4462:	3f 4f       	sbci	r19, 0xFF	; 255
    4464:	83 e0       	ldi	r24, 0x03	; 3
    4466:	6f 85       	ldd	r22, Y+15	; 0x0f
    4468:	a9 01       	movw	r20, r18
    446a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <M_DIO_void_getPinValue>
				_delay_ms(100);
				M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
				if(read==ACTIVE_LOW_PRESSED)
				{

						while(read==ACTIVE_LOW_PRESSED)
    446e:	8a a1       	ldd	r24, Y+34	; 0x22
    4470:	88 23       	and	r24, r24
    4472:	a9 f3       	breq	.-22     	; 0x445e <H_KEYPAD_void_getPressedKey+0x182>
						{
							M_DIO_void_getPinValue(KEYPAD_COLS_PORT, loc_col_indx, &read);
						}//while
						loc_Key =loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN][loc_col_indx - KEYPAD_C0_PIN];
    4474:	88 89       	ldd	r24, Y+16	; 0x10
    4476:	88 2f       	mov	r24, r24
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	9c 01       	movw	r18, r24
    447c:	24 50       	subi	r18, 0x04	; 4
    447e:	30 40       	sbci	r19, 0x00	; 0
    4480:	8f 85       	ldd	r24, Y+15	; 0x0f
    4482:	88 2f       	mov	r24, r24
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	ac 01       	movw	r20, r24
    4488:	42 50       	subi	r20, 0x02	; 2
    448a:	50 40       	sbci	r21, 0x00	; 0
    448c:	22 0f       	add	r18, r18
    448e:	33 1f       	adc	r19, r19
    4490:	22 0f       	add	r18, r18
    4492:	33 1f       	adc	r19, r19
    4494:	ce 01       	movw	r24, r28
    4496:	01 96       	adiw	r24, 0x01	; 1
    4498:	82 0f       	add	r24, r18
    449a:	93 1f       	adc	r25, r19
    449c:	84 0f       	add	r24, r20
    449e:	95 1f       	adc	r25, r21
    44a0:	fc 01       	movw	r30, r24
    44a2:	71 96       	adiw	r30, 0x11	; 17
    44a4:	80 81       	ld	r24, Z
    44a6:	89 8b       	std	Y+17, r24	; 0x11
						return loc_Key;
    44a8:	f9 89       	ldd	r31, Y+17	; 0x11
    44aa:	fb a3       	std	Y+35, r31	; 0x23
    44ac:	15 c0       	rjmp	.+42     	; 0x44d8 <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,LOW);
		for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    44ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b0:	8f 5f       	subi	r24, 0xFF	; 255
    44b2:	8f 87       	std	Y+15, r24	; 0x0f
    44b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b6:	86 30       	cpi	r24, 0x06	; 6
    44b8:	08 f4       	brcc	.+2      	; 0x44bc <H_KEYPAD_void_getPressedKey+0x1e0>
    44ba:	47 cf       	rjmp	.-370    	; 0x434a <H_KEYPAD_void_getPressedKey+0x6e>
					}// if 2nd reading
				}// if 1St reading

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	68 89       	ldd	r22, Y+16	; 0x10
    44c0:	41 e0       	ldi	r20, 0x01	; 1
    44c2:	0e 94 27 0c 	call	0x184e	; 0x184e <M_DIO_void_setPinValue>
	u8 loc_Key= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    44c6:	88 89       	ldd	r24, Y+16	; 0x10
    44c8:	8f 5f       	subi	r24, 0xFF	; 255
    44ca:	88 8b       	std	Y+16, r24	; 0x10
    44cc:	88 89       	ldd	r24, Y+16	; 0x10
    44ce:	88 30       	cpi	r24, 0x08	; 8
    44d0:	08 f4       	brcc	.+2      	; 0x44d4 <H_KEYPAD_void_getPressedKey+0x1f8>
    44d2:	33 cf       	rjmp	.-410    	; 0x433a <H_KEYPAD_void_getPressedKey+0x5e>

			}// for
			// Deactivate row (HIGH )
		M_DIO_void_setPinValue(KEYPAD_ROWS_PORT,loc_row_indx,HIGH);
		}
		return loc_Key;
    44d4:	89 89       	ldd	r24, Y+17	; 0x11
    44d6:	8b a3       	std	Y+35, r24	; 0x23
    44d8:	8b a1       	ldd	r24, Y+35	; 0x23
	}
    44da:	a8 96       	adiw	r28, 0x28	; 40
    44dc:	0f b6       	in	r0, 0x3f	; 63
    44de:	f8 94       	cli
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	cd bf       	out	0x3d, r28	; 61
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	08 95       	ret

000044ec <main>:
#include"SSD_init.h"
#include"TIMER_int.h"
#include"GIE_int.h"

void Action(void);
void main(){
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62

	M_DIO_void_setPinDir(PORTB_ID,PIN3, OUT);
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	63 e0       	ldi	r22, 0x03	; 3
    44f8:	41 e0       	ldi	r20, 0x01	; 1
    44fa:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_DIO_void_setPinDir>
	//init led
	//H_Led_void_ledInit(RED_LED);

	//init timer mode +timer Oc0 mode
	M_TIMER0_void_Init();
    44fe:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_TIMER0_void_Init>
	//set time
	//M_TIMER0_void_setTime(1000);
	//GIE
	//M_GIE_void_enable();
	//timer starrt;
	M_TIMER0_void_start();
    4502:	0e 94 3a 07 	call	0xe74	; 0xe74 <M_TIMER0_void_start>
	while(1)
	{
		M_TIMER0_void_setFastPWM(250);
    4506:	8a ef       	ldi	r24, 0xFA	; 250
    4508:	0e 94 8d 08 	call	0x111a	; 0x111a <M_TIMER0_void_setFastPWM>
    450c:	fc cf       	rjmp	.-8      	; 0x4506 <main+0x1a>

0000450e <Action>:


	}
}
void Action(void)
{
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_toggle(RED_LED);
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <H_Led_void_toggle>
	M_GIE_void_disable();
    451c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <M_GIE_void_disable>
}
    4520:	cf 91       	pop	r28
    4522:	df 91       	pop	r29
    4524:	08 95       	ret

00004526 <__mulsi3>:
    4526:	62 9f       	mul	r22, r18
    4528:	d0 01       	movw	r26, r0
    452a:	73 9f       	mul	r23, r19
    452c:	f0 01       	movw	r30, r0
    452e:	82 9f       	mul	r24, r18
    4530:	e0 0d       	add	r30, r0
    4532:	f1 1d       	adc	r31, r1
    4534:	64 9f       	mul	r22, r20
    4536:	e0 0d       	add	r30, r0
    4538:	f1 1d       	adc	r31, r1
    453a:	92 9f       	mul	r25, r18
    453c:	f0 0d       	add	r31, r0
    453e:	83 9f       	mul	r24, r19
    4540:	f0 0d       	add	r31, r0
    4542:	74 9f       	mul	r23, r20
    4544:	f0 0d       	add	r31, r0
    4546:	65 9f       	mul	r22, r21
    4548:	f0 0d       	add	r31, r0
    454a:	99 27       	eor	r25, r25
    454c:	72 9f       	mul	r23, r18
    454e:	b0 0d       	add	r27, r0
    4550:	e1 1d       	adc	r30, r1
    4552:	f9 1f       	adc	r31, r25
    4554:	63 9f       	mul	r22, r19
    4556:	b0 0d       	add	r27, r0
    4558:	e1 1d       	adc	r30, r1
    455a:	f9 1f       	adc	r31, r25
    455c:	bd 01       	movw	r22, r26
    455e:	cf 01       	movw	r24, r30
    4560:	11 24       	eor	r1, r1
    4562:	08 95       	ret

00004564 <__udivmodqi4>:
    4564:	99 1b       	sub	r25, r25
    4566:	79 e0       	ldi	r23, 0x09	; 9
    4568:	04 c0       	rjmp	.+8      	; 0x4572 <__udivmodqi4_ep>

0000456a <__udivmodqi4_loop>:
    456a:	99 1f       	adc	r25, r25
    456c:	96 17       	cp	r25, r22
    456e:	08 f0       	brcs	.+2      	; 0x4572 <__udivmodqi4_ep>
    4570:	96 1b       	sub	r25, r22

00004572 <__udivmodqi4_ep>:
    4572:	88 1f       	adc	r24, r24
    4574:	7a 95       	dec	r23
    4576:	c9 f7       	brne	.-14     	; 0x456a <__udivmodqi4_loop>
    4578:	80 95       	com	r24
    457a:	08 95       	ret

0000457c <__divmodhi4>:
    457c:	97 fb       	bst	r25, 7
    457e:	09 2e       	mov	r0, r25
    4580:	07 26       	eor	r0, r23
    4582:	0a d0       	rcall	.+20     	; 0x4598 <__divmodhi4_neg1>
    4584:	77 fd       	sbrc	r23, 7
    4586:	04 d0       	rcall	.+8      	; 0x4590 <__divmodhi4_neg2>
    4588:	27 d0       	rcall	.+78     	; 0x45d8 <__udivmodhi4>
    458a:	06 d0       	rcall	.+12     	; 0x4598 <__divmodhi4_neg1>
    458c:	00 20       	and	r0, r0
    458e:	1a f4       	brpl	.+6      	; 0x4596 <__divmodhi4_exit>

00004590 <__divmodhi4_neg2>:
    4590:	70 95       	com	r23
    4592:	61 95       	neg	r22
    4594:	7f 4f       	sbci	r23, 0xFF	; 255

00004596 <__divmodhi4_exit>:
    4596:	08 95       	ret

00004598 <__divmodhi4_neg1>:
    4598:	f6 f7       	brtc	.-4      	; 0x4596 <__divmodhi4_exit>
    459a:	90 95       	com	r25
    459c:	81 95       	neg	r24
    459e:	9f 4f       	sbci	r25, 0xFF	; 255
    45a0:	08 95       	ret

000045a2 <__divmodsi4>:
    45a2:	97 fb       	bst	r25, 7
    45a4:	09 2e       	mov	r0, r25
    45a6:	05 26       	eor	r0, r21
    45a8:	0e d0       	rcall	.+28     	; 0x45c6 <__divmodsi4_neg1>
    45aa:	57 fd       	sbrc	r21, 7
    45ac:	04 d0       	rcall	.+8      	; 0x45b6 <__divmodsi4_neg2>
    45ae:	28 d0       	rcall	.+80     	; 0x4600 <__udivmodsi4>
    45b0:	0a d0       	rcall	.+20     	; 0x45c6 <__divmodsi4_neg1>
    45b2:	00 1c       	adc	r0, r0
    45b4:	38 f4       	brcc	.+14     	; 0x45c4 <__divmodsi4_exit>

000045b6 <__divmodsi4_neg2>:
    45b6:	50 95       	com	r21
    45b8:	40 95       	com	r20
    45ba:	30 95       	com	r19
    45bc:	21 95       	neg	r18
    45be:	3f 4f       	sbci	r19, 0xFF	; 255
    45c0:	4f 4f       	sbci	r20, 0xFF	; 255
    45c2:	5f 4f       	sbci	r21, 0xFF	; 255

000045c4 <__divmodsi4_exit>:
    45c4:	08 95       	ret

000045c6 <__divmodsi4_neg1>:
    45c6:	f6 f7       	brtc	.-4      	; 0x45c4 <__divmodsi4_exit>
    45c8:	90 95       	com	r25
    45ca:	80 95       	com	r24
    45cc:	70 95       	com	r23
    45ce:	61 95       	neg	r22
    45d0:	7f 4f       	sbci	r23, 0xFF	; 255
    45d2:	8f 4f       	sbci	r24, 0xFF	; 255
    45d4:	9f 4f       	sbci	r25, 0xFF	; 255
    45d6:	08 95       	ret

000045d8 <__udivmodhi4>:
    45d8:	aa 1b       	sub	r26, r26
    45da:	bb 1b       	sub	r27, r27
    45dc:	51 e1       	ldi	r21, 0x11	; 17
    45de:	07 c0       	rjmp	.+14     	; 0x45ee <__udivmodhi4_ep>

000045e0 <__udivmodhi4_loop>:
    45e0:	aa 1f       	adc	r26, r26
    45e2:	bb 1f       	adc	r27, r27
    45e4:	a6 17       	cp	r26, r22
    45e6:	b7 07       	cpc	r27, r23
    45e8:	10 f0       	brcs	.+4      	; 0x45ee <__udivmodhi4_ep>
    45ea:	a6 1b       	sub	r26, r22
    45ec:	b7 0b       	sbc	r27, r23

000045ee <__udivmodhi4_ep>:
    45ee:	88 1f       	adc	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	5a 95       	dec	r21
    45f4:	a9 f7       	brne	.-22     	; 0x45e0 <__udivmodhi4_loop>
    45f6:	80 95       	com	r24
    45f8:	90 95       	com	r25
    45fa:	bc 01       	movw	r22, r24
    45fc:	cd 01       	movw	r24, r26
    45fe:	08 95       	ret

00004600 <__udivmodsi4>:
    4600:	a1 e2       	ldi	r26, 0x21	; 33
    4602:	1a 2e       	mov	r1, r26
    4604:	aa 1b       	sub	r26, r26
    4606:	bb 1b       	sub	r27, r27
    4608:	fd 01       	movw	r30, r26
    460a:	0d c0       	rjmp	.+26     	; 0x4626 <__udivmodsi4_ep>

0000460c <__udivmodsi4_loop>:
    460c:	aa 1f       	adc	r26, r26
    460e:	bb 1f       	adc	r27, r27
    4610:	ee 1f       	adc	r30, r30
    4612:	ff 1f       	adc	r31, r31
    4614:	a2 17       	cp	r26, r18
    4616:	b3 07       	cpc	r27, r19
    4618:	e4 07       	cpc	r30, r20
    461a:	f5 07       	cpc	r31, r21
    461c:	20 f0       	brcs	.+8      	; 0x4626 <__udivmodsi4_ep>
    461e:	a2 1b       	sub	r26, r18
    4620:	b3 0b       	sbc	r27, r19
    4622:	e4 0b       	sbc	r30, r20
    4624:	f5 0b       	sbc	r31, r21

00004626 <__udivmodsi4_ep>:
    4626:	66 1f       	adc	r22, r22
    4628:	77 1f       	adc	r23, r23
    462a:	88 1f       	adc	r24, r24
    462c:	99 1f       	adc	r25, r25
    462e:	1a 94       	dec	r1
    4630:	69 f7       	brne	.-38     	; 0x460c <__udivmodsi4_loop>
    4632:	60 95       	com	r22
    4634:	70 95       	com	r23
    4636:	80 95       	com	r24
    4638:	90 95       	com	r25
    463a:	9b 01       	movw	r18, r22
    463c:	ac 01       	movw	r20, r24
    463e:	bd 01       	movw	r22, r26
    4640:	cf 01       	movw	r24, r30
    4642:	08 95       	ret

00004644 <__prologue_saves__>:
    4644:	2f 92       	push	r2
    4646:	3f 92       	push	r3
    4648:	4f 92       	push	r4
    464a:	5f 92       	push	r5
    464c:	6f 92       	push	r6
    464e:	7f 92       	push	r7
    4650:	8f 92       	push	r8
    4652:	9f 92       	push	r9
    4654:	af 92       	push	r10
    4656:	bf 92       	push	r11
    4658:	cf 92       	push	r12
    465a:	df 92       	push	r13
    465c:	ef 92       	push	r14
    465e:	ff 92       	push	r15
    4660:	0f 93       	push	r16
    4662:	1f 93       	push	r17
    4664:	cf 93       	push	r28
    4666:	df 93       	push	r29
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
    466c:	ca 1b       	sub	r28, r26
    466e:	db 0b       	sbc	r29, r27
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	09 94       	ijmp

0000467c <__epilogue_restores__>:
    467c:	2a 88       	ldd	r2, Y+18	; 0x12
    467e:	39 88       	ldd	r3, Y+17	; 0x11
    4680:	48 88       	ldd	r4, Y+16	; 0x10
    4682:	5f 84       	ldd	r5, Y+15	; 0x0f
    4684:	6e 84       	ldd	r6, Y+14	; 0x0e
    4686:	7d 84       	ldd	r7, Y+13	; 0x0d
    4688:	8c 84       	ldd	r8, Y+12	; 0x0c
    468a:	9b 84       	ldd	r9, Y+11	; 0x0b
    468c:	aa 84       	ldd	r10, Y+10	; 0x0a
    468e:	b9 84       	ldd	r11, Y+9	; 0x09
    4690:	c8 84       	ldd	r12, Y+8	; 0x08
    4692:	df 80       	ldd	r13, Y+7	; 0x07
    4694:	ee 80       	ldd	r14, Y+6	; 0x06
    4696:	fd 80       	ldd	r15, Y+5	; 0x05
    4698:	0c 81       	ldd	r16, Y+4	; 0x04
    469a:	1b 81       	ldd	r17, Y+3	; 0x03
    469c:	aa 81       	ldd	r26, Y+2	; 0x02
    469e:	b9 81       	ldd	r27, Y+1	; 0x01
    46a0:	ce 0f       	add	r28, r30
    46a2:	d1 1d       	adc	r29, r1
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	f8 94       	cli
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	cd bf       	out	0x3d, r28	; 61
    46ae:	ed 01       	movw	r28, r26
    46b0:	08 95       	ret

000046b2 <_exit>:
    46b2:	f8 94       	cli

000046b4 <__stop_program>:
    46b4:	ff cf       	rjmp	.-2      	; 0x46b4 <__stop_program>
